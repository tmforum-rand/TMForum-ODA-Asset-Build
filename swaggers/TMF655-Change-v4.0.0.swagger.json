{
    "swagger": "2.0",
    "info": {
        "title": "API ChangeManagement",
        "description": "## TMF API Reference : TMF 655 The Change Management API provides the standard integration capabilities between external applications and Change Management Application",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/ChangeManagement/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "changeRequest"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/changeRequest": {
            "get": {
                "operationId": "listChangeRequest",
                "summary": "List or find ChangeRequest objects",
                "description": "This operation list or find ChangeRequest entities",
                "tags": [
                    "changeRequest"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ChangeRequest"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createChangeRequest",
                "summary": "Creates a ChangeRequest",
                "description": "This operation creates a ChangeRequest entity.",
                "tags": [
                    "changeRequest"
                ],
                "parameters": [
                    {
                        "name": "changeRequest",
                        "description": "The ChangeRequest to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/changeRequest/{id}": {
            "get": {
                "operationId": "retrieveChangeRequest",
                "summary": "Retrieves a ChangeRequest by ID",
                "description": "This operation retrieves a ChangeRequest entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "changeRequest"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ChangeRequest",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchChangeRequest",
                "summary": "Updates partially a ChangeRequest",
                "description": "This operation updates partially a ChangeRequest entity.",
                "tags": [
                    "changeRequest"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ChangeRequest",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "changeRequest",
                        "description": "The ChangeRequest to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteChangeRequest",
                "summary": "Deletes a ChangeRequest",
                "description": "This operation deletes a ChangeRequest entity.",
                "tags": [
                    "changeRequest"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ChangeRequest",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/changeRequestCreateEvent": {
            "post": {
                "operationId": "listenToChangeRequestCreateEvent",
                "summary": "Client listener for entity ChangeRequestCreateEvent",
                "description": "Example of a client listener for receiving the notification ChangeRequestCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/changeRequestStatusChangeEvent": {
            "post": {
                "operationId": "listenToChangeRequestStatusChangeEvent",
                "summary": "Client listener for entity ChangeRequestStatusChangeEvent",
                "description": "Example of a client listener for receiving the notification ChangeRequestStatusChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestStatusChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/changeRequestDeleteEvent": {
            "post": {
                "operationId": "listenToChangeRequestDeleteEvent",
                "summary": "Client listener for entity ChangeRequestDeleteEvent",
                "description": "Example of a client listener for receiving the notification ChangeRequestDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/changeRequestAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToChangeRequestAttributeValueChangeEvent",
                "summary": "Client listener for entity ChangeRequestAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification ChangeRequestAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/changeRequestApprovalRequiredEvent": {
            "post": {
                "operationId": "listenToChangeRequestApprovalRequiredEvent",
                "summary": "Client listener for entity ChangeRequestApprovalRequiredEvent",
                "description": "Example of a client listener for receiving the notification ChangeRequestApprovalRequiredEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ChangeRequestApprovalRequiredEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "Any": {},
        "Attachment": {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AttachmentRef": {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique-Identifier for this attachment"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL serving as reference for the attachment resource"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Link to the attachment media/content"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AttachmentRefOrValue": {
            "type": "object",
            "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ChangeRequest": {
            "type": "object",
            "description": "Change Request is a type of request which can be used for the management and control of Change Management process \n -within a service provider organisation or \n -between a customer and a service provider or \n -between a service provider and a partner and vice versa.",
            "required": [
                "targetEntity"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of a Change Request. It is created on repository side (a Change Management system)"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink to access a change request"
                },
                "actualEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation actually finished"
                },
                "actualStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation actually started"
                },
                "channel": {
                    "type": "string",
                    "description": "A channel represents the way the Change Request was created"
                },
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request is confirmed to be completed"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the change request"
                },
                "impact": {
                    "type": "string",
                    "description": "Indicates the impact of this change"
                },
                "lastUpdateDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request was updated"
                },
                "plannedEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be finished"
                },
                "plannedStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be started"
                },
                "priority": {
                    "type": "string",
                    "description": "Used by consumers to prioritize a change request in Change Management system"
                },
                "requestDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request is raised"
                },
                "requestType": {
                    "type": "string",
                    "description": "Indicates the type of the change request"
                },
                "risk": {
                    "type": "string",
                    "description": "The risk to implement this change request"
                },
                "riskMitigationPlan": {
                    "type": "string",
                    "description": "The risk mitigation plan"
                },
                "riskValue": {
                    "type": "string",
                    "description": "The additional cost if the risk will happen"
                },
                "scheduledDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time that the schedule is made"
                },
                "statusChangeDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request status was changed"
                },
                "statusChangeReason": {
                    "type": "string",
                    "description": "Reason of the status change"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "The attachments of the communication message (when it is email type)"
                },
                "budget": {
                    "$ref": "#/definitions/Money"
                },
                "changeRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChangeRequestRelationship"
                    }
                },
                "changeRequestCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "impactEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactEntity"
                    }
                },
                "location": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue",
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)"
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "problemTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "The parties involved in the change request"
                },
                "resolution": {
                    "$ref": "#/definitions/Resolution"
                },
                "sla": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SLARef"
                    }
                },
                "specification": {
                    "$ref": "#/definitions/EntitySpecificationRef"
                },
                "status": {
                    "$ref": "#/definitions/ChangeRequestStatusType"
                },
                "targetEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedEntity"
                    },
                    "minItems": 1
                },
                "troubleTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }
                },
                "workLog": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkLog"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ChangeRequest_Create": {
            "type": "object",
            "description": "Change Request is a type of request which can be used for the management and control of Change Management process \n -within a service provider organisation or \n -between a customer and a service provider or \n -between a service provider and a partner and vice versa.\nSkipped properties: id,href,lastUpdateTime,statusChangeDate,statusChangeReason,status,actualEndTime,actualStartTime,completionDate,lastUpdateDate",
            "required": [
                "targetEntity",
                "priority",
                "specification",
                "plannedStartTime",
                "plannedEndTime",
                "requestType"
            ],
            "properties": {
                "channel": {
                    "type": "string",
                    "description": "A channel represents the way the Change Request was created"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the change request"
                },
                "impact": {
                    "type": "string",
                    "description": "Indicates the impact of this change"
                },
                "plannedEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be finished"
                },
                "plannedStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be started"
                },
                "priority": {
                    "type": "string",
                    "description": "Used by consumers to prioritize a change request in Change Management system"
                },
                "requestDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request is raised"
                },
                "requestType": {
                    "type": "string",
                    "description": "Indicates the type of the change request"
                },
                "risk": {
                    "type": "string",
                    "description": "The risk to implement this change request"
                },
                "riskMitigationPlan": {
                    "type": "string",
                    "description": "The risk mitigation plan"
                },
                "riskValue": {
                    "type": "string",
                    "description": "The additional cost if the risk will happen"
                },
                "scheduledDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time that the schedule is made"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "The attachments of the communication message (when it is email type)"
                },
                "budget": {
                    "$ref": "#/definitions/Money"
                },
                "changeRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChangeRequestRelationship"
                    }
                },
                "changeRequestCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "impactEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactEntity"
                    }
                },
                "location": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue",
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)"
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "problemTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "The parties involved in the change request"
                },
                "resolution": {
                    "$ref": "#/definitions/Resolution"
                },
                "sla": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SLARef"
                    }
                },
                "specification": {
                    "$ref": "#/definitions/EntitySpecificationRef"
                },
                "targetEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedEntity"
                    },
                    "minItems": 1
                },
                "troubleTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }
                },
                "workLog": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkLog"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ChangeRequest_Update": {
            "type": "object",
            "description": "Change Request is a type of request which can be used for the management and control of Change Management process \n -within a service provider organisation or \n -between a customer and a service provider or \n -between a service provider and a partner and vice versa.\nSkipped properties: id,href,@baseType,@schemaLocation,@type",
            "required": [
                "targetEntity"
            ],
            "properties": {
                "actualEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation actually finished"
                },
                "actualStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation actually started"
                },
                "channel": {
                    "type": "string",
                    "description": "A channel represents the way the Change Request was created"
                },
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request is confirmed to be completed"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the change request"
                },
                "impact": {
                    "type": "string",
                    "description": "Indicates the impact of this change"
                },
                "lastUpdateDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request was updated"
                },
                "plannedEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be finished"
                },
                "plannedStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be started"
                },
                "priority": {
                    "type": "string",
                    "description": "Used by consumers to prioritize a change request in Change Management system"
                },
                "requestDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request is raised"
                },
                "requestType": {
                    "type": "string",
                    "description": "Indicates the type of the change request"
                },
                "risk": {
                    "type": "string",
                    "description": "The risk to implement this change request"
                },
                "riskMitigationPlan": {
                    "type": "string",
                    "description": "The risk mitigation plan"
                },
                "riskValue": {
                    "type": "string",
                    "description": "The additional cost if the risk will happen"
                },
                "scheduledDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time that the schedule is made"
                },
                "statusChangeDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request status was changed"
                },
                "statusChangeReason": {
                    "type": "string",
                    "description": "Reason of the status change"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "The attachments of the communication message (when it is email type)"
                },
                "budget": {
                    "$ref": "#/definitions/Money"
                },
                "changeRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChangeRequestRelationship"
                    }
                },
                "changeRequestCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "impactEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactEntity"
                    }
                },
                "location": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue",
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)"
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "problemTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "The parties involved in the change request"
                },
                "resolution": {
                    "$ref": "#/definitions/Resolution"
                },
                "sla": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SLARef"
                    }
                },
                "specification": {
                    "$ref": "#/definitions/EntitySpecificationRef"
                },
                "status": {
                    "$ref": "#/definitions/ChangeRequestStatusType"
                },
                "targetEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedEntity"
                    },
                    "minItems": 1
                },
                "troubleTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }
                },
                "workLog": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkLog"
                    }
                }
            }
        },
        "ChangeRequestRef": {
            "type": "object",
            "description": "Reference to a Change Request",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the change request"
                },
                "href": {
                    "type": "string",
                    "description": "The reference link to the change request"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ChangeRequestRefOrValue": {
            "type": "object",
            "description": "A Service to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Service entity and not the RelatedServiceRefOrValue class itself",
            "required": [
                "targetEntity"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of a Change Request. It is created on repository side (a Change Management system)"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink to access a change request"
                },
                "actualEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation actually finished"
                },
                "actualStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation actually started"
                },
                "channel": {
                    "type": "string",
                    "description": "A channel represents the way the Change Request was created"
                },
                "completionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request is confirmed to be completed"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the change request"
                },
                "impact": {
                    "type": "string",
                    "description": "Indicates the impact of this change"
                },
                "lastUpdateDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request was updated"
                },
                "plannedEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be finished"
                },
                "plannedStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change implementation is planned to be started"
                },
                "priority": {
                    "type": "string",
                    "description": "Used by consumers to prioritize a change request in Change Management system"
                },
                "requestDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request is raised"
                },
                "requestType": {
                    "type": "string",
                    "description": "Indicates the type of the change request"
                },
                "risk": {
                    "type": "string",
                    "description": "The risk to implement this change request"
                },
                "riskMitigationPlan": {
                    "type": "string",
                    "description": "The risk mitigation plan"
                },
                "riskValue": {
                    "type": "string",
                    "description": "The additional cost if the risk will happen"
                },
                "scheduledDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time that the schedule is made"
                },
                "statusChangeDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the change request status was changed"
                },
                "statusChangeReason": {
                    "type": "string",
                    "description": "Reason of the status change"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "description": "The attachments of the communication message (when it is email type)"
                },
                "budget": {
                    "$ref": "#/definitions/Money"
                },
                "changeRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ChangeRequestRelationship"
                    }
                },
                "changeRequestCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "externalReference": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalReference"
                    }
                },
                "impactEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImpactEntity"
                    }
                },
                "location": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue",
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)"
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "problemTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "The parties involved in the change request"
                },
                "resolution": {
                    "$ref": "#/definitions/Resolution"
                },
                "sla": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SLARef"
                    }
                },
                "specification": {
                    "$ref": "#/definitions/EntitySpecificationRef"
                },
                "status": {
                    "$ref": "#/definitions/ChangeRequestStatusType"
                },
                "targetEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedEntity"
                    },
                    "minItems": 1
                },
                "troubleTicket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }
                },
                "workLog": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkLog"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ChangeRequestRelationship": {
            "type": "object",
            "required": [
                "relationshipType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string"
                },
                "changeRequest": {
                    "$ref": "#/definitions/ChangeRequestRefOrValue"
                },
                "changeRequestRelationshipCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ChangeRequestStatusType": {
            "type": "string",
            "description": "Possible values for the state of the change request",
            "enum": [
                "acknowledged",
                "requestForAuthorization",
                "waitForApproval",
                "approved",
                "scheduled",
                "postImplementationReview",
                "fallbackExecution",
                "cancelled",
                "rejected",
                "inProgress",
                "failed",
                "completed"
            ]
        },
        "Characteristic": {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "characteristicRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicRelationship"
                    }
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CharacteristicRelationship": {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Entity": {
            "type": "object",
            "description": "Base entity schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "EntitySpecificationRef": {
            "type": "object",
            "description": "reference to an EntitySpecification object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "EntitySpecification version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ExternalReference": {
            "type": "object",
            "description": "External reference of the individual or reference in other system",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "externalReferenceType": {
                    "type": "string",
                    "description": "Type of the external reference"
                },
                "name": {
                    "type": "string",
                    "description": "External reference name"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ImpactEntity": {
            "type": "object",
            "description": "A reference to an imapcted entity",
            "required": [
                "@referredType",
                "id",
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "action": {
                    "type": "string",
                    "description": "The action on an entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "The role of an entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "Money": {
            "type": "object",
            "description": "A base / value business entity used to represent money",
            "properties": {
                "unit": {
                    "type": "string",
                    "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
                },
                "value": {
                    "type": "number",
                    "format": "float",
                    "description": "A signed floating point number, the meaning of the sign is according to the context of the API that uses this Data type"
                }
            }
        },
        "Note": {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
                "id": {
                    "example": [
                        "afa9-3d90aaa8da0f"
                    ],
                    "type": "string",
                    "description": "Identifier of the note within its containing entity"
                },
                "author": {
                    "example": [
                        "Mr. N. Bene"
                    ],
                    "type": "string",
                    "description": "Author of the note"
                },
                "date": {
                    "example": [
                        "2020-11-20T08:00:00Z"
                    ],
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of the note"
                },
                "text": {
                    "example": [
                        "This is important"
                    ],
                    "type": "string",
                    "description": "Text of the note"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Place": {
            "type": "object",
            "description": "Place reference. Place defines the places where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PlaceRef": {
            "type": "object",
            "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Quantity": {
            "type": "object",
            "description": "An amount in a given unit",
            "properties": {
                "amount": {
                    "default": 1,
                    "type": "number",
                    "format": "float",
                    "description": "Numeric value in a given unit"
                },
                "units": {
                    "type": "string",
                    "description": "Unit"
                }
            }
        },
        "Record": {
            "type": "object",
            "description": "A record in a worklog.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "dateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date time that a record is generated."
                },
                "description": {
                    "type": "string",
                    "description": "The detail description in a record."
                },
                "supportPerson": {
                    "type": "string",
                    "description": "The person who logged that record."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "RelatedEntity": {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance.",
            "required": [
                "@referredType",
                "id",
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "The role of an entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedPlaceRefOrValue": {
            "type": "object",
            "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
            "required": [
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "role": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "Resolution": {
            "type": "object",
            "description": "The way one or more change request has been implementation through a direct remedy or task",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "code": {
                    "type": "string",
                    "description": "The resolutions code, it can be configured as a multiple level hierarchy"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the resolution"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resolution"
                },
                "task": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Task"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "SLARef": {
            "type": "object",
            "description": "ServiceLevelAgreement reference: A service level agreement (SLA) is a type of agreement that represents a formal negotiated agreement between two parties designed to create a common understanding about products, services, priorities, responsibilities, and so forth. The SLA is a set of appropriate procedures and targets formally or informally agreed between parties in order to achieve and maintain specified Quality of Service.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of service level agreement"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service level agreement"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service level agreement"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ServiceProblemRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Task": {
            "type": "object",
            "description": "A step or task along in the process of implementation a Change Request.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the task."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the task."
                },
                "state": {
                    "type": "string",
                    "description": "The state of the task."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                }
            }
        },
        "TroubleTicketRef": {
            "type": "object",
            "description": "TroubleTicket reference, for when a Trouble Ticket is used by other entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "WorkLog": {
            "type": "object",
            "description": "A record of the work performed on the change request during the investigation and resolution process.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "createDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of worklog generated."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the worklog."
                },
                "lastUpdateDateTime": {
                    "type": "string",
                    "description": "Date and time when the worklog updated."
                },
                "record": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Record"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "ChangeRequestCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ChangeRequestCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ChangeRequestCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "changeRequest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ChangeRequest"
                }
            }
        },
        "ChangeRequestStatusChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ChangeRequestStatusChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ChangeRequestStatusChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "changeRequest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ChangeRequest"
                }
            }
        },
        "ChangeRequestDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ChangeRequestDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ChangeRequestDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "changeRequest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ChangeRequest"
                }
            }
        },
        "ChangeRequestAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ChangeRequestAttributeValueChangeEventPayload"
                }
            }
        },
        "ChangeRequestAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "changeRequest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ChangeRequest"
                }
            }
        },
        "ChangeRequestApprovalRequiredEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ChangeRequestApprovalRequiredEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ChangeRequestApprovalRequiredEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "changeRequest": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ChangeRequest"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}