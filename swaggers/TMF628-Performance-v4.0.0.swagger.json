{
    "swagger": "2.0",
    "info": {
        "title": "Performance",
        "description": "TMF628 Performance Management API",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/performance/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "measurementCollectionJob"
        },
        {
            "name": "performanceMeasurement"
        },
        {
            "name": "performanceIndicatorSpecification"
        },
        {
            "name": "performanceIndicatorGroupSpecification"
        },
        {
            "name": "dataAccessEndpoint"
        },
        {
            "name": "queryTask"
        },
        {
            "name": "trackingRecord"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/measurementCollectionJob": {
            "get": {
                "operationId": "listMeasurementCollectionJob",
                "summary": "List or find MeasurementCollectionJob objects",
                "description": "This operation list or find MeasurementCollectionJob entities",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MeasurementCollectionJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createMeasurementCollectionJob",
                "summary": "Creates a MeasurementCollectionJob",
                "description": "This operation creates a MeasurementCollectionJob entity.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "measurementCollectionJob",
                        "description": "The MeasurementCollectionJob to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/measurementCollectionJob/{id}": {
            "get": {
                "operationId": "retrieveMeasurementCollectionJob",
                "summary": "Retrieves a MeasurementCollectionJob by ID",
                "description": "This operation retrieves a MeasurementCollectionJob entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the MeasurementCollectionJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchMeasurementCollectionJob",
                "summary": "Updates partially a MeasurementCollectionJob",
                "description": "This operation updates partially a MeasurementCollectionJob entity.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the MeasurementCollectionJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "measurementCollectionJob",
                        "description": "The MeasurementCollectionJob to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteMeasurementCollectionJob",
                "summary": "Deletes a MeasurementCollectionJob",
                "description": "This operation deletes a MeasurementCollectionJob entity.",
                "tags": [
                    "measurementCollectionJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the MeasurementCollectionJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceMeasurement": {
            "get": {
                "operationId": "listPerformanceMeasurement",
                "summary": "List or find PerformanceMeasurement objects",
                "description": "This operation list or find PerformanceMeasurement entities",
                "tags": [
                    "performanceMeasurement"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceMeasurement"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceMeasurement/{id}": {
            "get": {
                "operationId": "retrievePerformanceMeasurement",
                "summary": "Retrieves a PerformanceMeasurement by ID",
                "description": "This operation retrieves a PerformanceMeasurement entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "performanceMeasurement"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceMeasurement",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PerformanceMeasurement"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorSpecification": {
            "get": {
                "operationId": "listPerformanceIndicatorSpecification",
                "summary": "List or find PerformanceIndicatorSpecification objects",
                "description": "This operation list or find PerformanceIndicatorSpecification entities",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceIndicatorSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPerformanceIndicatorSpecification",
                "summary": "Creates a PerformanceIndicatorSpecification",
                "description": "This operation creates a PerformanceIndicatorSpecification entity.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "performanceIndicatorSpecification",
                        "description": "The PerformanceIndicatorSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorSpecification/{id}": {
            "get": {
                "operationId": "retrievePerformanceIndicatorSpecification",
                "summary": "Retrieves a PerformanceIndicatorSpecification by ID",
                "description": "This operation retrieves a PerformanceIndicatorSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPerformanceIndicatorSpecification",
                "summary": "Updates partially a PerformanceIndicatorSpecification",
                "description": "This operation updates partially a PerformanceIndicatorSpecification entity.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "performanceIndicatorSpecification",
                        "description": "The PerformanceIndicatorSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePerformanceIndicatorSpecification",
                "summary": "Deletes a PerformanceIndicatorSpecification",
                "description": "This operation deletes a PerformanceIndicatorSpecification entity.",
                "tags": [
                    "performanceIndicatorSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorGroupSpecification": {
            "get": {
                "operationId": "listPerformanceIndicatorGroupSpecification",
                "summary": "List or find PerformanceIndicatorGroupSpecification objects",
                "description": "This operation list or find PerformanceIndicatorGroupSpecification entities",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createPerformanceIndicatorGroupSpecification",
                "summary": "Creates a PerformanceIndicatorGroupSpecification",
                "description": "This operation creates a PerformanceIndicatorGroupSpecification entity.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "performanceIndicatorGroupSpecification",
                        "description": "The PerformanceIndicatorGroupSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/performanceIndicatorGroupSpecification/{id}": {
            "get": {
                "operationId": "retrievePerformanceIndicatorGroupSpecification",
                "summary": "Retrieves a PerformanceIndicatorGroupSpecification by ID",
                "description": "This operation retrieves a PerformanceIndicatorGroupSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorGroupSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchPerformanceIndicatorGroupSpecification",
                "summary": "Updates partially a PerformanceIndicatorGroupSpecification",
                "description": "This operation updates partially a PerformanceIndicatorGroupSpecification entity.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorGroupSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "performanceIndicatorGroupSpecification",
                        "description": "The PerformanceIndicatorGroupSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deletePerformanceIndicatorGroupSpecification",
                "summary": "Deletes a PerformanceIndicatorGroupSpecification",
                "description": "This operation deletes a PerformanceIndicatorGroupSpecification entity.",
                "tags": [
                    "performanceIndicatorGroupSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the PerformanceIndicatorGroupSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dataAccessEndpoint": {
            "get": {
                "operationId": "listDataAccessEndpoint",
                "summary": "List or find DataAccessEndpoint objects",
                "description": "This operation list or find DataAccessEndpoint entities",
                "tags": [
                    "dataAccessEndpoint"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DataAccessEndpoint"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dataAccessEndpoint/{id}": {
            "get": {
                "operationId": "retrieveDataAccessEndpoint",
                "summary": "Retrieves a DataAccessEndpoint by ID",
                "description": "This operation retrieves a DataAccessEndpoint entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "dataAccessEndpoint"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the DataAccessEndpoint",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DataAccessEndpoint"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/queryTask": {
            "get": {
                "operationId": "listQueryTask",
                "summary": "List or find QueryTask objects",
                "description": "This operation list or find QueryTask entities",
                "tags": [
                    "queryTask"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/QueryTask"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/queryTask/{id}": {
            "get": {
                "operationId": "retrieveQueryTask",
                "summary": "Retrieves a QueryTask by ID",
                "description": "This operation retrieves a QueryTask entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "queryTask"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the QueryTask",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/QueryTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/trackingRecord": {
            "get": {
                "operationId": "listTrackingRecord",
                "summary": "List or find TrackingRecord objects",
                "description": "This operation list or find TrackingRecord entities",
                "tags": [
                    "trackingRecord"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TrackingRecord"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/trackingRecord/{id}": {
            "get": {
                "operationId": "retrieveTrackingRecord",
                "summary": "Retrieves a TrackingRecord by ID",
                "description": "This operation retrieves a TrackingRecord entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "trackingRecord"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the TrackingRecord",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TrackingRecord"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobCreateEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobCreateEvent",
                "summary": "Client listener for entity MeasurementCollectionJobCreateEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobExecutionStateChangeEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobExecutionStateChangeEvent",
                "summary": "Client listener for entity MeasurementCollectionJobExecutionStateChangeEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobExecutionStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobExecutionStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobDeleteEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobDeleteEvent",
                "summary": "Client listener for entity MeasurementCollectionJobDeleteEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobAttributeValueChangeEvent",
                "summary": "Client listener for entity MeasurementCollectionJobAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobFilesReadyEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobFilesReadyEvent",
                "summary": "Client listener for entity MeasurementCollectionJobFilesReadyEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobFilesReadyEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobFilesReadyEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/measurementCollectionJobFilesPreparationErrorEvent": {
            "post": {
                "operationId": "listenToMeasurementCollectionJobFilesPreparationErrorEvent",
                "summary": "Client listener for entity MeasurementCollectionJobFilesPreparationErrorEvent",
                "description": "Example of a client listener for receiving the notification MeasurementCollectionJobFilesPreparationErrorEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/MeasurementCollectionJobFilesPreparationErrorEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/performanceMeasurementCreateEvent": {
            "post": {
                "operationId": "listenToPerformanceMeasurementCreateEvent",
                "summary": "Client listener for entity PerformanceMeasurementCreateEvent",
                "description": "Example of a client listener for receiving the notification PerformanceMeasurementCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PerformanceMeasurementCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/performanceMeasurementCollectionReadyEvent": {
            "post": {
                "operationId": "listenToPerformanceMeasurementCollectionReadyEvent",
                "summary": "Client listener for entity PerformanceMeasurementCollectionReadyEvent",
                "description": "Example of a client listener for receiving the notification PerformanceMeasurementCollectionReadyEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/PerformanceMeasurementCollectionReadyEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/queryTaskCreateEvent": {
            "post": {
                "operationId": "listenToQueryTaskCreateEvent",
                "summary": "Client listener for entity QueryTaskCreateEvent",
                "description": "Example of a client listener for receiving the notification QueryTaskCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/QueryTaskCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/queryTaskExecutionStateChangeEvent": {
            "post": {
                "operationId": "listenToQueryTaskExecutionStateChangeEvent",
                "summary": "Client listener for entity QueryTaskExecutionStateChangeEvent",
                "description": "Example of a client listener for receiving the notification QueryTaskExecutionStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/QueryTaskExecutionStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                }
            }
        },
        "AdministrativeState": {
            "type": "string",
            "description": "This is enumeration for Administrative state",
            "enum": [
                "locked",
                "unlocked"
            ]
        },
        "Any": {},
        "Attachment": {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "example": "video/mp4",
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "example": "iPhone 14 video",
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Remote reference to the content if web-addressable"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "AttachmentRef": {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique-Identifier for this attachment"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL serving as reference for the attachment resource"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Link to the attachment media/content"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AttachmentRefOrValue": {
            "type": "object",
            "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "example": "video/mp4",
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "example": "iPhone 14 video",
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Remote reference to the content if web-addressable"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "Characteristic": {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "characteristicRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicRelationship"
                    }
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CharacteristicRelationship": {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CollectionType": {
            "type": "string",
            "description": "This is enumeration for CollectionType state",
            "enum": [
                "cumulative",
                "delta",
                "discrete_event",
                "gauge",
                "status_inspection"
            ]
        },
        "CompressionEnumType": {
            "type": "string",
            "description": "Enumeration of supported compressions. All extensions allowed.",
            "enum": [
                "no_compression",
                "gzip",
                "vendor_ext",
                "minor_ext"
            ]
        },
        "CompressionType": {
            "type": "object",
            "description": "File compression type.",
            "properties": {
                "compressionEnumType": {
                    "$ref": "#/definitions/CompressionEnumType"
                }
            }
        },
        "ConstraintRef": {
            "type": "object",
            "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "constraint version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "DataAccessEndpoint": {
            "type": "object",
            "description": "This is the endpoint exposed by the IoT Device to authorized users.",
            "required": [
                "href",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "description": "A resource URI pointing to the resource in the OB that stores the detailed information."
                },
                "apiType": {
                    "type": "string"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "endOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is operating"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "startOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is operating"
                },
                "uri": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI for using the data access API"
                },
                "value": {
                    "type": "string",
                    "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
                },
                "activationFeature": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feature"
                    },
                    "description": "Configuration features"
                },
                "administrativeState": {
                    "$ref": "#/definitions/ResourceAdministrativeStateType",
                    "description": "Tracks the administrative state of the resource, such as locked, unlocked, shutdown and so on."
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "operationalState": {
                    "$ref": "#/definitions/ResourceOperationalStateType",
                    "description": "Tracks the operational state of the resource, such as enable, disable and so on."
                },
                "place": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                },
                "resourceStatus": {
                    "$ref": "#/definitions/ResourceStatusType",
                    "description": "Tracks the resource status of the resource, such as standby, alarm, available, reserved, suspended and so on."
                },
                "uriQueryFilter": {
                    "$ref": "#/definitions/DataFilterMap",
                    "description": "a Data Filter Map (several mapping of a list of attributes/fields with a filter template) to define the attributes/fields  and their acceptable values to be used when querying/searching the Collected Data using the 'uri'"
                },
                "usageState": {
                    "$ref": "#/definitions/ResourceUsageStateType",
                    "description": "Tracks the usage state of the resource, such as idle, active, busy and so on."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DataFilterAttribute": {
            "type": "object",
            "description": "give an attribute used for filtering",
            "required": [
                "value"
            ],
            "properties": {
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the Attribute used for filtering"
                }
            }
        },
        "DataFilterAttributeStringArray": {
            "type": "object",
            "description": "An array of attribute names for filtering",
            "required": [
                "value"
            ],
            "properties": {
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the Attribute used for filtering"
                }
            }
        },
        "DataFilterMap": {
            "type": "object",
            "description": "entity to Describe a given filter attributes/fields set using a mapping by type/template.",
            "properties": {
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataFilterMapItem"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DataFilterMapItem": {
            "type": "object",
            "description": "definition of a field used for filtering template with the associated attributes.",
            "properties": {
                "filterTemplate": {
                    "example": {
                        "name": "myRangeFilter0",
                        "@type": "DataFilterTemplateRange",
                        "lowerBound": {
                            "boundValue": -10,
                            "isInclusive": "False"
                        },
                        "upperBound": {
                            "boundValue": -10,
                            "isInclusive": "True"
                        }
                    },
                    "$ref": "#/definitions/DataFilterTemplate",
                    "description": "the template filter to be used for all the attributes in 'fieldNames'"
                },
                "stringArray": {
                    "example": {
                        "value": [
                            "City",
                            "Destination",
                            "Channels"
                        ]
                    },
                    "$ref": "#/definitions/DataFilterAttributeStringArray",
                    "description": "list/array of field/attribute names to which the filter template applies"
                }
            }
        },
        "DataFilterTemplate": {
            "type": "object",
            "description": "Abstract entity to Describe a given filter template,\n a filter template can be used in two ways:\n1) as a straight filter definition\n2) as a way to specify the acceptable value for a field for filtering",
            "properties": {
                "id": {
                    "example": "6c088cf7f1bc",
                    "type": "string",
                    "description": "Unique identifier of this DataFilterTemplate"
                },
                "href": {
                    "example": "http://host/dataFilerTemplate/6c088cf7f1bc",
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to this DataFilterTemplate"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this DataFilterTemplate"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this DataFilterTemplate"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DataFilterTemplateBoolean": {
            "type": "object",
            "description": "A filter representing a boolean value template. the template can be used two ways:\n1) as filtering so the collected data will only contains attribute value corresponding to 'criteria'\n2) as limit for querying so the only value acceptable for the attibute are the values define by 'criteria'",
            "properties": {
                "id": {
                    "example": "6c088cf7f1bc",
                    "type": "string",
                    "description": "Unique identifier of this DataFilterTemplate"
                },
                "href": {
                    "example": "http://host/dataFilerTemplate/6c088cf7f1bc",
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to this DataFilterTemplate"
                },
                "criteria": {
                    "type": "boolean",
                    "description": "The boolean value, if any. when not present it means both value true and false are usable."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this DataFilterTemplate"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this DataFilterTemplate"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DataFilterTemplateRange": {
            "type": "object",
            "description": "A filter representing a range value template. the template can be used two ways:\n1) as filtering so the collected data will only contains data's with the attribute values which are inside the lower and upper bound\n2) as limit, so the only value acceptable for querying  using an attibute are the attribute value inside the lower and upper bound",
            "required": [
                "criteria"
            ],
            "properties": {
                "id": {
                    "example": "6c088cf7f1bc",
                    "type": "string",
                    "description": "Unique identifier of this DataFilterTemplate"
                },
                "href": {
                    "example": "http://host/dataFilerTemplate/6c088cf7f1bc",
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to this DataFilterTemplate"
                },
                "criteria": {
                    "type": "object"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this DataFilterTemplate"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this DataFilterTemplate"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DataFilterTemplateRegex": {
            "type": "object",
            "description": "A filter representing a Regex pattern value template. the template can be used two ways:\n1) as filtering so the collected data will only contains data's with the attribute values which satisfies the regex pattern in 'criteria'\n2) as limit, so the only value acceptable for querying  using an attibute are the attribute value satisfying the regex pattern in 'criteria'",
            "required": [
                "criteria"
            ],
            "properties": {
                "id": {
                    "example": "6c088cf7f1bc",
                    "type": "string",
                    "description": "Unique identifier of this DataFilterTemplate"
                },
                "href": {
                    "example": "http://host/dataFilerTemplate/6c088cf7f1bc",
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to this DataFilterTemplate"
                },
                "criteria": {
                    "type": "string",
                    "description": "The regular expression (regex) pattern that this Filter must satisfy.\n Can also be used for exact string match."
                },
                "description": {
                    "type": "string",
                    "description": "Description of this DataFilterTemplate"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to this DataFilterTemplate"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DayOfMonthRecurrence": {
            "type": "object",
            "properties": {
                "dates": {
                    "type": "string",
                    "format": "date-time"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "DayOfWeekRecurrence": {
            "type": "object",
            "properties": {
                "dates": {
                    "type": "string",
                    "format": "date-time"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Duration": {
            "type": "object",
            "description": "A time interval in a given unit of time",
            "properties": {
                "amount": {
                    "type": "integer",
                    "description": "Time interval (number of seconds, minutes, hours, etc.)"
                },
                "units": {
                    "type": "string",
                    "description": "Unit of time (seconds, minutes, hours, etc.)"
                }
            }
        },
        "Entity": {
            "type": "object",
            "description": "Base entity schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ExecutionStateType": {
            "type": "string",
            "description": "Possible values for the state of the execution",
            "enum": [
                "acknowledged",
                "rejected",
                "pending",
                "inProgress",
                "cancelled",
                "completed",
                "failed"
            ]
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Feature": {
            "type": "object",
            "description": "Configuration feature.",
            "required": [
                "featureCharacteristic",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the feature."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "True if this is a feature group. Default is false."
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "True if this feature is enabled. Default is true."
                },
                "name": {
                    "type": "string",
                    "description": "This is the name for the feature."
                },
                "constraint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConstraintRef"
                    },
                    "description": "This is a list of feature constraints."
                },
                "featureCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "minItems": 1,
                    "description": "This is a list of Characteristics for a particular feature."
                },
                "featureRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureRelationship"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "FeatureRelationship": {
            "type": "object",
            "description": "Configuration feature",
            "required": [
                "name",
                "relationshipType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target feature."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the target feature."
                },
                "relationshipType": {
                    "type": "string",
                    "description": "This is the type of the feature relationship."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this feature relationship is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "FileTransferData": {
            "type": "object",
            "properties": {
                "fileFormat": {
                    "type": "string"
                },
                "fileLocation": {
                    "type": "string",
                    "format": "uri"
                },
                "transportProtocol": {
                    "type": "string"
                },
                "compressionType": {
                    "$ref": "#/definitions/CompressionType"
                },
                "packingType": {
                    "$ref": "#/definitions/PackingType"
                },
                "retentionPeriod": {
                    "$ref": "#/definitions/Duration"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Granularity": {
            "type": "string",
            "description": "Sampling rate of the collection or production of performance indicators.",
            "enum": [
                "g_1mn",
                "g_5mn",
                "g_15mn",
                "g_30mn",
                "g_1h",
                "g_24h",
                "g_1m",
                "g_1y",
                "na"
            ]
        },
        "IndicatorType": {
            "type": "string",
            "description": "This is enumeration for Indicator Type",
            "enum": [
                "string",
                "int",
                "float",
                "double"
            ]
        },
        "LogicalResource": {
            "type": "object",
            "description": "Logic resource is a type of resource that describes the common set of attributes shared by all concrete logical resources (e.g. TPE, MSISDN, IP Addresses) in the inventory.",
            "required": [
                "href",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "endOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is operating"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "startOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is operating"
                },
                "value": {
                    "type": "string",
                    "description": "the value of the logical resource. E.g '0746712345' for  MSISDN's"
                },
                "activationFeature": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feature"
                    },
                    "description": "Configuration features"
                },
                "administrativeState": {
                    "$ref": "#/definitions/ResourceAdministrativeStateType",
                    "description": "Tracks the administrative state of the resource, such as locked, unlocked, shutdown and so on."
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "operationalState": {
                    "$ref": "#/definitions/ResourceOperationalStateType",
                    "description": "Tracks the operational state of the resource, such as enable, disable and so on."
                },
                "place": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                },
                "resourceStatus": {
                    "$ref": "#/definitions/ResourceStatusType",
                    "description": "Tracks the resource status of the resource, such as standby, alarm, available, reserved, suspended and so on."
                },
                "usageState": {
                    "$ref": "#/definitions/ResourceUsageStateType",
                    "description": "Tracks the usage state of the resource, such as idle, active, busy and so on."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ManagementJob": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "dataAccessEndpoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    }
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementCollectionJob": {
            "type": "object",
            "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "searchTask": {
                    "type": "string",
                    "format": "uri",
                    "description": "adress of the search service for this collection job, \n the querying can be filtered using the attributes defined by the 'searchTaskFilter'.\n a POST on this uri will return a 'QueryTask' object(containing the uri to do the subsequent query) or directly filtered the data"
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "dataAccessEndpoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    }
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "jobCollectionFilter": {
                    "$ref": "#/definitions/DataFilterMap",
                    "description": "a DataFilterMap (several mapping of list of attributes/fields with a filter template), to be used by the collection job to limit the scope of the Data collection. so the DataFilterMap is used here as a straight filtering requirement on the data collection"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "reportingPeriod": {
                    "$ref": "#/definitions/ReportingPeriod"
                },
                "reportingSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system requesting the measurement collection job"
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "searchTaskFilter": {
                    "$ref": "#/definitions/DataFilterMap",
                    "description": "a DataFilterMap (several mapping of a list of attributes/fields with a filter template) to define the attributes/fields  and their acceptable values to be used when querying/searching the Collected Data"
                },
                "sourceSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system that the measurements are collected from"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementCollectionJob_Create": {
            "type": "object",
            "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.\nSkipped properties: id,href",
            "properties": {
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "outputFormat": {
                    "type": "string"
                },
                "searchTask": {
                    "type": "string",
                    "format": "uri",
                    "description": "adress of the search service for this collection job, \n the querying can be filtered using the attributes defined by the 'searchTaskFilter'.\n a POST on this uri will return a 'QueryTask' object(containing the uri to do the subsequent query) or directly filtered the data"
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "dataAccessEndpoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    }
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "jobCollectionFilter": {
                    "$ref": "#/definitions/DataFilterMap",
                    "description": "a DataFilterMap (several mapping of list of attributes/fields with a filter template), to be used by the collection job to limit the scope of the Data collection. so the DataFilterMap is used here as a straight filtering requirement on the data collection"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "reportingPeriod": {
                    "$ref": "#/definitions/ReportingPeriod"
                },
                "reportingSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system requesting the measurement collection job"
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "searchTaskFilter": {
                    "$ref": "#/definitions/DataFilterMap",
                    "description": "a DataFilterMap (several mapping of a list of attributes/fields with a filter template) to define the attributes/fields  and their acceptable values to be used when querying/searching the Collected Data"
                },
                "sourceSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system that the measurements are collected from"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementCollectionJob_Update": {
            "type": "object",
            "description": "Used to control the periodic collection of performance indicators, implemented as a sub-entity of the PM Measurement Job.\nSkipped properties: id,href,adminState,creationTime,executionState,lastModifiedTime",
            "properties": {
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "outputFormat": {
                    "type": "string"
                },
                "searchTask": {
                    "type": "string",
                    "format": "uri",
                    "description": "adress of the search service for this collection job, \n the querying can be filtered using the attributes defined by the 'searchTaskFilter'.\n a POST on this uri will return a 'QueryTask' object(containing the uri to do the subsequent query) or directly filtered the data"
                },
                "dataAccessEndpoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    }
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "jobCollectionFilter": {
                    "$ref": "#/definitions/DataFilterMap",
                    "description": "a DataFilterMap (several mapping of list of attributes/fields with a filter template), to be used by the collection job to limit the scope of the Data collection. so the DataFilterMap is used here as a straight filtering requirement on the data collection"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "reportingPeriod": {
                    "$ref": "#/definitions/ReportingPeriod"
                },
                "reportingSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system requesting the measurement collection job"
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "searchTaskFilter": {
                    "$ref": "#/definitions/DataFilterMap",
                    "description": "a DataFilterMap (several mapping of a list of attributes/fields with a filter template) to define the attributes/fields  and their acceptable values to be used when querying/searching the Collected Data"
                },
                "sourceSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system that the measurements are collected from"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MeasurementCollectionJobRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "MeasurementJob": {
            "type": "object",
            "description": "A PM measurement job is the administrative entity defined by a client application to perform a periodic activity related to PM data.  The PM activities may be production of measurements, collection of measurements or PM objective monitoring (scheduled evaluation of thresholds).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The measurement job creation time."
                },
                "jobId": {
                    "type": "string",
                    "description": "The ID of the management job."
                },
                "jobPriority": {
                    "default": 5,
                    "type": "integer",
                    "description": "The priority of the management job. The way the management application will use the JobPriority to schedule job execution is application specific and outside the scope. Integer, limited to a range of 1 to 10."
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The last time that a measurement job was modified."
                },
                "adminState": {
                    "$ref": "#/definitions/AdministrativeState"
                },
                "dataAccessEndpoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataAccessEndpoint"
                    }
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "fileTransferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FileTransferData"
                    }
                },
                "granularity": {
                    "$ref": "#/definitions/Granularity"
                },
                "monitoredClassCriteria": {
                    "$ref": "#/definitions/MonitoredClassCriteria"
                },
                "monitoredInstancesCriteria": {
                    "$ref": "#/definitions/MonitoredInstancesCriteria"
                },
                "performanceIndicatorGroupSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorGroupSpecification"
                    }
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue"
                    }
                },
                "reportingSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system requesting the measurement collection job"
                },
                "scheduleDefinition": {
                    "$ref": "#/definitions/ScheduleDefinition"
                },
                "sourceSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system that the measurements are collected from"
                },
                "trackingRecord": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MonitoredClassCriteria": {
            "type": "object",
            "description": "Specifies a monitored object class (a string) in conjunction with a filter object.",
            "properties": {
                "monitoredObjectClass": {
                    "type": "string",
                    "description": "A monitored object class for specifying the set of instances that are referenced by a PM query."
                },
                "objectInstanceFilter": {
                    "type": "string",
                    "description": "A filter that can be used in conjunction with the monitored object class for specifying the set of instances that are referenced by a PM query."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MonitoredInstancesCriteria": {
            "type": "object",
            "description": "List of monitored instances",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "MonthlyScheduleDayOfWeekDefinition": {
            "type": "object",
            "properties": {
                "recurringDaySequence": {
                    "type": "string"
                },
                "dayOfMonthRecurrence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DayOfMonthRecurrence"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Note": {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
                "id": {
                    "example": [
                        "afa9-3d90aaa8da0f"
                    ],
                    "type": "string",
                    "description": "Identifier of the note within its containing entity"
                },
                "author": {
                    "example": [
                        "Mr. N. Bene"
                    ],
                    "type": "string",
                    "description": "Author of the note"
                },
                "date": {
                    "example": [
                        "2020-11-20T08:00:00Z"
                    ],
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of the note"
                },
                "text": {
                    "example": [
                        "This is important"
                    ],
                    "type": "string",
                    "description": "Text of the note"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PackingEnumType": {
            "type": "string",
            "description": "Enumeration of supported packing/packaging. All extensions allowed.",
            "enum": [
                "NO_PACKING",
                "GZIP",
                "TAR",
                "VENDOR_EXT",
                "MINOR_EXT"
            ]
        },
        "PackingType": {
            "type": "object",
            "description": "Specify if the output file(s) are to be packed.",
            "properties": {
                "packingEnumType": {
                    "$ref": "#/definitions/PackingEnumType"
                }
            }
        },
        "PerformanceIndicatorGroupSpecification": {
            "type": "object",
            "required": [
                "name",
                "performanceIndicatorSpecification"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Group specification"
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorGroupSpecification_Create": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "required": [
                "name",
                "performanceIndicatorSpecification"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of Group specification"
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorGroupSpecification_Update": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "required": [
                "name",
                "performanceIndicatorSpecification"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of Group specification"
                },
                "performanceIndicatorSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecRelationship": {
            "type": "object",
            "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity",
            "required": [
                "perfSpec",
                "relationshipType",
                "validFor"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "relationshipType": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this specification"
                },
                "perfSpec": {
                    "$ref": "#/definitions/PerformanceIndicatorSpecificationRefOrValue",
                    "description": "Hyperlink reference to the target specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the performanceIndicatorSpecRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecification": {
            "type": "object",
            "description": "Holds the definition of the requested Performance indicator including: its name, value type, collection type, description and units.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the PerformanceIndicatorSpecification."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double, float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecification_Create": {
            "type": "object",
            "description": "Holds the definition of the requested Performance indicator including: its name, value type, collection type, description and units.\nSkipped properties: id,href",
            "properties": {
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double, float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecification_Update": {
            "type": "object",
            "description": "Holds the definition of the requested Performance indicator including: its name, value type, collection type, description and units.\nSkipped properties: id,href",
            "properties": {
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double, float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PerformanceIndicatorSpecificationRef": {
            "type": "object",
            "description": "PerformanceIndicatorSpecification reference: A PerformanceIndicatorSpecification is a detailed description of a tangible or intangible object made available externally in the form of a PerformanceIndicatorSpecification to customers or other parties playing a party role.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "PerformanceIndicatorSpecificationRefOrValue": {
            "type": "object",
            "description": "A PerformanceIndicatorSpecification to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the Related PerformanceIndicatorSpecificationRefOrValue class itself",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the PerformanceIndicatorSpecification."
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "derivationAlgorithm": {
                    "type": "string",
                    "description": "A step-by-step procedure used to calculate the value of PerformanceIndicator."
                },
                "derivationMethod": {
                    "type": "string",
                    "description": "For simple calculations, the method used to calculate the value of a PerformanceIndicator, such as average, minimum, maximum, sum and so forth."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the PerformanceIndicatorSpecification is."
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A grouping or set of PerformanceIndicatorSpecifications that are classified together because of common characteristics, such as technology specific, service specific, or technology/service independent."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit by which the indicator is measured. For example, seconds, KBs, rate per second, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a PerformanceIndicatorSpecification is known and distinguished from other PerformanceIndicatorSpecifications."
                },
                "perspective": {
                    "type": "string",
                    "description": "The point of view for the PerformanceIndicatorSpecification, such as a single user instance or aggregation."
                },
                "collectionType": {
                    "$ref": "#/definitions/CollectionType",
                    "description": "The type of collection: gauge, cumulative,delta,discrete event,status inspection. Indicators can be produced using these methods."
                },
                "indicatorType": {
                    "$ref": "#/definitions/IndicatorType",
                    "description": "A kind of value that the PerformanceIndicator can take; double, float,int, string."
                },
                "performanceIndicatorSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceIndicatorSpecRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the PerformanceIndicatorSpecification is applicable."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "PerformanceMeasurement": {
            "type": "object",
            "description": "A measurement of a performance indicator.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "A free-text description of the performance measurement"
                },
                "indicatorCategory": {
                    "type": "string",
                    "description": "A category of the measurement (different SDOs may be using different categories)"
                },
                "indicatorName": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a measurement is known and distinguished from other performance measurements"
                },
                "indicatorType": {
                    "type": "string",
                    "description": "This attribute indicates different forms in which the measurement data can be captured (please see details below)"
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "The unit of the measurement (e.g. second, bytes, Celsius, etc.)"
                },
                "observedValue": {
                    "type": "string",
                    "description": "The measurement value"
                },
                "measurementCollectionJob": {
                    "$ref": "#/definitions/MeasurementCollectionJobRef",
                    "description": "A reference to a related measurement collection job"
                },
                "performanceIndicatorSpecification": {
                    "$ref": "#/definitions/PerformanceIndicatorSpecificationRef"
                },
                "reportingSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system requesting the measurement"
                },
                "sourceSystem": {
                    "$ref": "#/definitions/ResourceRef",
                    "description": "The system that the measurement is related to"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Performance measurement validity period"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Place": {
            "type": "object",
            "description": "Place reference. Place defines the places where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "PlaceRef": {
            "type": "object",
            "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ProtocolTransferData": {
            "type": "object",
            "properties": {
                "transportProtocol": {
                    "type": "string"
                }
            }
        },
        "Quantity": {
            "type": "object",
            "description": "An amount in a given unit",
            "properties": {
                "amount": {
                    "default": 1,
                    "type": "number",
                    "format": "float",
                    "description": "Numeric value in a given unit"
                },
                "units": {
                    "type": "string",
                    "description": "Unit"
                }
            }
        },
        "QueryTask": {
            "type": "object",
            "description": "A task being executed in response of a query request.",
            "properties": {
                "id": {
                    "example": "6c088cf7f1bc",
                    "type": "string",
                    "description": "Unique identifier of this QueryTask"
                },
                "href": {
                    "example": "http://host/QueryTask/6c088cf7f1bc",
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference to this QueryTask"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The task job creation time."
                },
                "dataLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "the uri to use, if necessary, to retrieve the data of a long running task"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the QueryTask."
                },
                "estimatedCompletionTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The estimated completion time of the task."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the QueryTask."
                },
                "progressPercent": {
                    "type": "integer",
                    "description": "the current progress percentage of the task"
                },
                "executionState": {
                    "$ref": "#/definitions/ExecutionStateType"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedPlaceRefOrValue": {
            "type": "object",
            "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
            "required": [
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "role": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ReportingPeriod": {
            "type": "string",
            "description": "Possible values for the reporting period",
            "enum": [
                "r_1mn",
                "r_5mn",
                "r_15mn",
                "r_30mn",
                "r_1h",
                "r_24h",
                "na"
            ]
        },
        "Resource": {
            "type": "object",
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources (e.g. TPE, EQUIPMENT) in the inventory.",
            "required": [
                "href",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
                },
                "href": {
                    "type": "string",
                    "description": "The URI for the object itself."
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "endOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is operating"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "startOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is operating"
                },
                "activationFeature": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feature"
                    },
                    "description": "Configuration features"
                },
                "administrativeState": {
                    "$ref": "#/definitions/ResourceAdministrativeStateType",
                    "description": "Tracks the administrative state of the resource, such as locked, unlocked, shutdown and so on."
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "operationalState": {
                    "$ref": "#/definitions/ResourceOperationalStateType",
                    "description": "Tracks the operational state of the resource, such as enable, disable and so on."
                },
                "place": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                },
                "resourceStatus": {
                    "$ref": "#/definitions/ResourceStatusType",
                    "description": "Tracks the resource status of the resource, such as standby, alarm, available, reserved, suspended and so on."
                },
                "usageState": {
                    "$ref": "#/definitions/ResourceUsageStateType",
                    "description": "Tracks the usage state of the resource, such as idle, active, busy and so on."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceAdministrativeStateType": {
            "type": "string",
            "description": "ResourceAdministrativeStateType enumerations",
            "enum": [
                "locked",
                "unlocked",
                "shutdown"
            ]
        },
        "ResourceOperationalStateType": {
            "type": "string",
            "description": "ResourceOperationalStateType enumerations",
            "enum": [
                "enable",
                "disable"
            ]
        },
        "ResourceRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceRefOrValue": {
            "type": "object",
            "description": "Resource is an abstract entity that describes the common set of attributes shared by all concrete resources. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Resource entity and not the related ResourceRefOrValue class itself",
            "required": [
                "href",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of an instance of the resource. Required to be unique within the resource type.  Used in URIs as the identifier for specific instances of a type."
                },
                "href": {
                    "type": "string",
                    "description": "The URI for the object itself."
                },
                "category": {
                    "type": "string",
                    "description": "Category of the concrete resource. e.g Gold, Silver for MSISDN concrete resource"
                },
                "description": {
                    "type": "string",
                    "description": "free-text description of the resource"
                },
                "endOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date till the resource is operating"
                },
                "name": {
                    "type": "string",
                    "description": "A string used to give a name to the resource"
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "A field that identifies the specific version of an instance of a resource."
                },
                "startOperatingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date time( DateTime). The date from which the resource is operating"
                },
                "activationFeature": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feature"
                    },
                    "description": "Configuration features"
                },
                "administrativeState": {
                    "$ref": "#/definitions/ResourceAdministrativeStateType",
                    "description": "Tracks the administrative state of the resource, such as locked, unlocked, shutdown and so on."
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    }
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    }
                },
                "operationalState": {
                    "$ref": "#/definitions/ResourceOperationalStateType",
                    "description": "Tracks the operational state of the resource, such as enable, disable and so on."
                },
                "place": {
                    "$ref": "#/definitions/RelatedPlaceRefOrValue"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "resourceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "resourceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRelationship"
                    }
                },
                "resourceSpecification": {
                    "$ref": "#/definitions/ResourceSpecificationRef"
                },
                "resourceStatus": {
                    "$ref": "#/definitions/ResourceStatusType",
                    "description": "Tracks the resource status of the resource, such as standby, alarm, available, reserved, suspended and so on."
                },
                "usageState": {
                    "$ref": "#/definitions/ResourceUsageStateType",
                    "description": "Tracks the usage state of the resource, such as idle, active, busy and so on."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ResourceRelationship": {
            "type": "object",
            "description": "Linked resources to the one instantiate, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (e.g. an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
            "required": [
                "relationshipType",
                "resource"
            ],
            "properties": {
                "relationshipType": {
                    "example": "bundled",
                    "type": "string",
                    "description": "Type of the resource relationship, such as [bundled] if the resource is a bundle and you want to describe the bundled resources inside this bundle; [reliesOn] if the resource needs another already owned resource to rely on (eg: an option on an already owned mobile access resource) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
                },
                "resource": {
                    "$ref": "#/definitions/ResourceRefOrValue"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "ResourceSpecificationRef": {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceStatusType": {
            "type": "string",
            "description": "ResourceStatusType enumerations",
            "enum": [
                "standby",
                "alarm",
                "available",
                "reserved",
                "unknown",
                "suspended"
            ]
        },
        "ResourceUsageStateType": {
            "type": "string",
            "description": "ResourceUsageStateType enumerations",
            "enum": [
                "idle",
                "active",
                "busy"
            ]
        },
        "ScheduleDefinition": {
            "type": "object",
            "description": "The schedule definition for running jobs.",
            "properties": {
                "recurringFrequency": {
                    "type": "string",
                    "description": "A recurring frequency to run a job within day that is included in schedule definition, for example: every 5 minutes, 15 minute, 30 minutes, 1 hour"
                },
                "scheduleDefinitionEndTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The Endtime of the Schedule Definition. If the attribute is empty the Schedule run forever, not having a time constraint."
                },
                "scheduleDefinitionHourRange": {
                    "type": "string",
                    "description": "A list of time ranges within a specific day that the schedule will be active on, for example 08:00-12:00, 16:00-19:00."
                },
                "scheduleDefinitionStartTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The Start time of the Schedule Definition"
                },
                "monthlyScheduleDayOfWeekDefinition": {
                    "$ref": "#/definitions/MonthlyScheduleDayOfWeekDefinition"
                },
                "weeklyScheduledDefinition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DayOfWeekRecurrence"
                    },
                    "description": "The weekly schedule is used to define a schedule that is based on the days of the week, e.g. a schedule that will be active only on Monday and Tuesday."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                }
            }
        },
        "TrackingRecord": {
            "type": "object",
            "description": "Tracking records allow the tracking of modifications on the problem. The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the TrackingRecord"
                },
                "description": {
                    "example": [
                        "acknowledge",
                        "clear"
                    ],
                    "type": "string",
                    "description": "Describes the action being done, such as: ack, clear"
                },
                "systemId": {
                    "type": "string",
                    "description": "Describes the system Id from which the action was done"
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Describes the time at which the action was done"
                },
                "user": {
                    "type": "string",
                    "description": "Describes the user doing the action"
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "MeasurementCollectionJobCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobExecutionStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobExecutionStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobExecutionStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobAttributeValueChangeEventPayload"
                }
            }
        },
        "MeasurementCollectionJobAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobFilesReadyEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobFilesReadyEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobFilesReadyEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "MeasurementCollectionJobFilesPreparationErrorEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/MeasurementCollectionJobFilesPreparationErrorEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "MeasurementCollectionJobFilesPreparationErrorEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "measurementCollectionJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/MeasurementCollectionJob"
                }
            }
        },
        "PerformanceMeasurementCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PerformanceMeasurementCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PerformanceMeasurementCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "performanceMeasurement": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PerformanceMeasurement"
                }
            }
        },
        "PerformanceMeasurementCollectionReadyEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/PerformanceMeasurementCollectionReadyEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "PerformanceMeasurementCollectionReadyEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "performanceMeasurement": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/PerformanceMeasurement"
                }
            }
        },
        "QueryTaskCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/QueryTaskCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "QueryTaskCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "queryTask": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/QueryTask"
                }
            }
        },
        "QueryTaskExecutionStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/QueryTaskExecutionStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "QueryTaskExecutionStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "queryTask": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/QueryTask"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}