{
	"info": {
		"_postman_id": "92a8f2bc-9636-43de-8f9c-29ddd47e5b9f",
		"name": "CTK-User_Role_Permission-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/UserRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "886050fd-4477-4f9c-8693-4f7d00a1964b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['entitlement', 'href', 'id'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('HREFUR01', instance['href']);",
									"pm.globals.set('IDUR01', instance['id']);",
									"",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"entitlement\": [\n    {},\n    {}\n  ]\n}"
						},
						"url": {
							"raw": "{{User_Role_Permission}}userRole",
							"host": [
								"{{User_Role_Permission}}userRole"
							]
						},
						"description": "This operation creates a UserRole"
					},
					"response": []
				},
				{
					"name": "/UserRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59014021-c9c2-4cac-ad94-728849b39321",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}userRole",
							"host": [
								"{{User_Role_Permission}}userRole"
							]
						},
						"description": "This operation search for the created UserRole"
					},
					"response": []
				},
				{
					"name": "/UserRole/{{IDUR01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70f56133-2dfd-4edf-bf41-8bb5dcd223b9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('IDUR01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('IDUR01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}userRole/{{IDUR01}}",
							"host": [
								"{{User_Role_Permission}}userRole"
							],
							"path": [
								"{{IDUR01}}"
							]
						},
						"description": "This operation search for one of the created UserRole"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/UserRole?fields=href",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9ecae49-29a2-48e2-9a3d-8c66abd96e57",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('IDUR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('IDUR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}userRole?href={{HREFUR01}}",
							"host": [
								"{{User_Role_Permission}}userRole"
							],
							"query": [
								{
									"key": "href",
									"value": "{{HREFUR01}}"
								}
							]
						},
						"description": "This operation filter a UserRole"
					},
					"response": []
				},
				{
					"name": "/UserRole?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ce1118d-39bb-47e8-ba48-e973dba68c4b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}userRole?fields=id",
							"host": [
								"{{User_Role_Permission}}userRole"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a UserRole"
					},
					"response": []
				},
				{
					"name": "/UserRole?id={{IDUR01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "927967cc-9048-4aa6-91ca-c8585049895c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('IDUR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['entitlement', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has entitlement attribute', function() { pm.expect(instance[\"entitlement\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDUR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFUR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFUR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDUR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDUR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDUR02\")) {",
									"            pm.test('IDUR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}userRole?id={{IDUR01}}",
							"host": [
								"{{User_Role_Permission}}userRole"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDUR01}}"
								}
							]
						},
						"description": "This operation filter a UserRole"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/UserRole/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6930ad0-9bb4-4feb-bcd3-b9cdaea0c022",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}userRole/47a648ba-5308-4e36-8496-2275204436eb",
							"host": [
								"{{User_Role_Permission}}userRole"
							],
							"path": [
								"47a648ba-5308-4e36-8496-2275204436eb"
							]
						},
						"description": "This operation search for one of the created UserRole"
					},
					"response": []
				}
			]
		},
		{
			"name": "N1",
			"item": [
				{
					"name": "/Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb77c59f-84e4-472a-a81e-77e06d7ea8c9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['user', 'validFor', 'href', 'id', 'user', 'validFor'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('HREFPE01', instance['href']);",
									"pm.globals.set('IDPE01', instance['id']);",
									"",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": {\n    \"id\": \"cust-745712-A\",\n    \"@referredType\": \"Individual\"\n  },\n  \"validFor\": {}\n}"
						},
						"url": {
							"raw": "{{User_Role_Permission}}permission",
							"host": [
								"{{User_Role_Permission}}permission"
							]
						},
						"description": "This operation creates a Permission"
					},
					"response": []
				},
				{
					"name": "/Permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b5c0e9-2592-476a-ad18-38b8f7f56f0f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['user', 'validFor', 'href', 'id', 'user', 'validFor'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPE01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPE02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['user', 'validFor', 'href', 'id', 'user', 'validFor'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPE01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPE02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}permission",
							"host": [
								"{{User_Role_Permission}}permission"
							]
						},
						"description": "This operation search for the created Permission"
					},
					"response": []
				},
				{
					"name": "/Permission/{{IDPE01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c27798dd-dc31-4679-8f0c-0a1e8096deb0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['user', 'validFor', 'href', 'id', 'user', 'validFor'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPE02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPE01\")) {",
									"            pm.test('IDPE01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['user', 'validFor', 'href', 'id', 'user', 'validFor'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPE02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPE01\")) {",
									"            pm.test('IDPE01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}permission/{{IDPE01}}",
							"host": [
								"{{User_Role_Permission}}permission"
							],
							"path": [
								"{{IDPE01}}"
							]
						},
						"description": "This operation search for one of the created Permission"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/Permission?fields=href",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2a37b38-3222-42e2-a4a0-a5e2f05ff182",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}permission?fields=href",
							"host": [
								"{{User_Role_Permission}}permission"
							],
							"query": [
								{
									"key": "fields",
									"value": "href"
								}
							]
						},
						"description": "This operation filter a Permission"
					},
					"response": []
				},
				{
					"name": "/Permission?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e027f01-e2f5-401e-875f-c5ba2841a9f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}permission?fields=id",
							"host": [
								"{{User_Role_Permission}}permission"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a Permission"
					},
					"response": []
				},
				{
					"name": "/Permission?id={{IDPE01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f958d7-66f0-4115-adbb-0f9c0f21fed8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['user', 'validFor', 'href', 'id', 'user', 'validFor'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPE01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPE02\")) {",
									"            pm.test('IDPE02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['user', 'validFor', 'href', 'id', 'user', 'validFor'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPE01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPE01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPE01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPE02\")) {",
									"            pm.test('IDPE02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}permission?id={{IDPE01}}",
							"host": [
								"{{User_Role_Permission}}permission"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDPE01}}"
								}
							]
						},
						"description": "This operation filter a Permission"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/Permission/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7200a61d-de27-4b0e-83d1-aaf1592811d1",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{User_Role_Permission}}permission/867fa44f-c1e8-4f09-840c-6f6c03406709",
							"host": [
								"{{User_Role_Permission}}permission"
							],
							"path": [
								"867fa44f-c1e8-4f09-840c-6f6c03406709"
							]
						},
						"description": "This operation search for one of the created Permission"
					},
					"response": []
				}
			]
		}
	]
}