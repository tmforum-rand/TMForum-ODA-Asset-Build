{
	"info": {
		"_postman_id": "0ee93dec-e54b-413a-b156-910dcb950915",
		"name": "CTK-679-Product_Offering_Qualification-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7503975"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/productOfferingQualification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"",
									"}",
									"",
									"if (jsonData[\"state\"] == \"done\"){",
									"    postman.setNextRequest(\"/productOfferingQualification/404ID\")",
									"}",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200, 201])",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"",
									"if (pm.response.code == 200) {",
									"    requiredAttributes = ['id', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem']",
									"}",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"if (pm.response.code == 201) {",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"}",
									"pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"",
									"pm.globals.set('IDPOQ01', instance['id']);",
									"",
									"if (pm.response.code == 201) {",
									"    pm.globals.set('HREFPOQ01', instance['href']);",
									"}",
									"pm.globals.set('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01', instance['productOfferingQualificationDate']);",
									"pm.globals.set('STATEPOQ01', instance['state']);",
									"pm.globals.set('PRODUCTOFFERINGQUALIFICATIONITEMPOQ01', instance['productOfferingQualificationItem']);",
									"",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"if (pm.response.code == 201) {",
									"    pm.test('Body includes value held on href', function () {",
									"    pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"}",
									"pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"});",
									"pm.test('Body includes value held on state', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['state']);",
									"});",
									"",
									"if (pm.response.code == 200){",
									"    postman.setNextRequest(\"/productOfferingQualification/404ID\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productOfferingQualificationItem\": [\n    {\n      \"id\": \"1\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							]
						},
						"description": "This operation creates a productOfferingQualification"
					},
					"response": []
				},
				{
					"name": "/productOfferingQualification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ02\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ02\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ02');});",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							]
						},
						"description": "This operation search for the created productOfferingQualification"
					},
					"response": []
				},
				{
					"name": "/productOfferingQualification/{{IDPOQ01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('IDPOQ02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('IDPOQ02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification/{{IDPOQ01}}",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"path": [
								"{{IDPOQ01}}"
							]
						},
						"description": "This operation search for one of the created productOfferingQualification"
					},
					"response": []
				}
			]
		},
		{
			"name": "N3",
			"item": [
				{
					"name": "/productOfferingQualification?state=done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ02\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ02\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ02');});",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification?state={{STATEPOQ01}}",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"query": [
								{
									"key": "state",
									"value": "{{STATEPOQ01}}"
								}
							]
						},
						"description": "This operation search for the created productOfferingQualification"
					},
					"response": []
				},
				{
					"name": "/productOfferingQualification?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href'];",
									"      ",
									"        pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href'];",
									"      ",
									"    pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification?fields=id",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a productOfferingQualification"
					},
					"response": []
				},
				{
					"name": "/productOfferingQualification?id={{IDPOQ01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('IDPOQ02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('IDPOQ02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification?id={{IDPOQ01}}",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDPOQ01}}"
								}
							]
						},
						"description": "This operation filter a productOfferingQualification"
					},
					"response": []
				},
				{
					"name": "/productOfferingQualification?href={{HREFPOQ01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('IDPOQ02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate', 'state', 'productOfferingQualificationItem'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationItem attribute', function() { pm.expect(instance[\"productOfferingQualificationItem\"]).to.be.a('array'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('IDPOQ02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification?href={{HREFPOQ01}}",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"query": [
								{
									"key": "href",
									"value": "{{HREFPOQ01}}"
								}
							]
						},
						"description": "This operation filter a productOfferingQualification"
					},
					"response": []
				},
				{
					"name": "/productOfferingQualification?fields=productOfferingQualificationDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"            pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ02\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'productOfferingQualificationDate'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has productOfferingQualificationDate attribute', function() { pm.expect(instance[\"productOfferingQualificationDate\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on productOfferingQualificationDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['productOfferingQualificationDate']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ01\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"        pm.test('productOfferingQualificationDate is ' + pm.globals.get(\"PRODUCTOFFERINGQUALIFICATIONDATEPOQ02\"), function() {pm.expect(instance['productOfferingQualificationDate']) == pm.globals.get('PRODUCTOFFERINGQUALIFICATIONDATEPOQ02');});",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification?fields=productOfferingQualificationDate",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"query": [
								{
									"key": "fields",
									"value": "productOfferingQualificationDate"
								}
							]
						},
						"description": "This operation filter a productOfferingQualification"
					},
					"response": []
				},
				{
					"name": "/productOfferingQualification?fields=state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"        pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEPOQ02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"    pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPOQ01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPOQ02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDPOQ02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOQ02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFPOQ02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOQ02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEPOQ02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEPOQ02');});",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification?fields=state",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"query": [
								{
									"key": "fields",
									"value": "state"
								}
							]
						},
						"description": "This operation filter a productOfferingQualification"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/productOfferingQualification/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification/z2z123z0-6zzz-4z5z-97z3-0z64z53z4680",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							],
							"path": [
								"z2z123z0-6zzz-4z5z-97z3-0z64z53z4680"
							]
						},
						"description": "This operation search for one of the created productOfferingQualification"
					},
					"response": []
				}
			]
		},
		{
			"name": "E2",
			"item": [
				{
					"name": "unexpecting parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"state\": \"waiting\",\n  \"productOfferingQualificationItem\": [\n    {\n      \"id\": \"1\",\n      \"expectedActivationDate\": \"2019-05-02T09:37:23.429Z\",\n      \"action\": \"add\",\n      \"note\": [\n        {\n          \"id\": \"2\",\n          \"author\": \"Jean Pontus\",\n          \"date\": \"2019-05-02T09:37:23.429Z\",\n          \"text\": \"home address is provided\",\n          \"@type\": \"Note\"\n        }\n      ],\n      \"product\": {\n        \"relatedPlace\": [\n          {\n            \"id\": \"459-fgr-t78\",\n            \"href\": \"https://host:port/geographicAddressManagement/v1/geographicAddress/459-fgr-t78\",\n            \"isRef\": true,\n            \"name\": \"Home address\",\n            \"role\": \"install adress\",\n            \"@referredType\": \"GeographicAddress\"\n          }\n        ]\n      },\n      \"productOffering\": {\n        \"id\": \"142789\",\n        \"href\": \"https://host:port/productCatalogManagement/v1/productOffering/142789\",\n        \"name\": \"TMF Broadband Offer\",\n        \"@type\": \"productOffering\",\n        \"@referredType\": \"ProductOffering\"\n      },\n      \"@type\": \"ProductOfferingQualificationItem\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{Product_Offering_Qualification_API}}productOfferingQualification",
							"host": [
								"{{Product_Offering_Qualification_API}}productOfferingQualification"
							]
						},
						"description": "This operation creates a productOfferingQualification"
					},
					"response": []
				}
			]
		}
	]
}