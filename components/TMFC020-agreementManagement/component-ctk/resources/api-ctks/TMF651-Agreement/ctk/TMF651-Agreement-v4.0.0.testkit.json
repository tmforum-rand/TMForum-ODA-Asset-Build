{
	"info": {
		"_postman_id": "d039ef66-3f6c-48bb-aea4-0abcfb836461",
		"name": "CTK-Agreement-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/agreementSpecification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"",
									"pm.globals.set('@BASETYPEAS01', instance['@baseType']);",
									"pm.globals.set('@SCHEMALOCATIONAS01', instance['@schemaLocation']);",
									"pm.globals.set('HREFAS01', instance['href']);",
									"pm.globals.set('IDAS01', instance['id']);",
									"pm.globals.set('NAMEAS01', instance['name']);",
									"pm.globals.set('DESCRIPTIONAS01', instance['description']);",
									"pm.globals.set('ISBUNDLEAS01', instance['isBundle']);",
									"pm.globals.set('LASTUPDATEAS01', instance['lastUpdate']);",
									"pm.globals.set('LIFECYCLESTATUSAS01', instance['lifecycleStatus']);",
									"pm.globals.set('VALIDFORAS01', instance['validFor']);",
									"pm.globals.set('VERSIONAS01', instance['version']);",
									"pm.globals.set('SERVICECATEGORYAS01', instance['serviceCategory']);",
									"pm.globals.set('RELATEDPARTYAS01', instance['relatedParty']);",
									"pm.globals.set('SPECIFICATIONCHARACTERISTICAS01', instance['specificationCharacteristic']);",
									"pm.globals.set('SPECIFICATIONRELATIONSHIPAS01', instance['specificationRelationship']);",
									"",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Moon Agreement Template\",\n  \"attachment\": [\n        {\n            \"id\": \"44\", \n            \"attachmentType\": \"Video\", \n            \"url\": \"http://example.com\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							]
						},
						"description": "This operation creates a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"",
									"pm.globals.set('@BASETYPEAS02', instance['@baseType']);",
									"pm.globals.set('@SCHEMALOCATIONAS02', instance['@schemaLocation']);",
									"pm.globals.set('HREFAS02', instance['href']);",
									"pm.globals.set('IDAS02', instance['id']);",
									"pm.globals.set('NAMEAS02', instance['name']);",
									"pm.globals.set('DESCRIPTIONAS02', instance['description']);",
									"pm.globals.set('ISBUNDLEAS02', instance['isBundle']);",
									"pm.globals.set('LASTUPDATEAS02', instance['lastUpdate']);",
									"pm.globals.set('LIFECYCLESTATUSAS02', instance['lifecycleStatus']);",
									"pm.globals.set('VALIDFORAS02', instance['validFor']);",
									"pm.globals.set('VERSIONAS02', instance['version']);",
									"pm.globals.set('SERVICECATEGORYAS02', instance['serviceCategory']);",
									"pm.globals.set('RELATEDPARTYAS02', instance['relatedParty']);",
									"pm.globals.set('SPECIFICATIONCHARACTERISTICAS02', instance['specificationCharacteristic']);",
									"pm.globals.set('SPECIFICATIONRELATIONSHIPAS02', instance['specificationRelationship']);",
									"",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Another Agreement Template\",\n  \"attachment\": [\n        {\n            \"id\": \"40\", \n            \"attachmentType\": \"Video\", \n            \"url\": \"http://xxxxx/40\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							]
						},
						"description": "This operation creates another agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							]
						},
						"description": "This operation search for the created agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification/{{IDAS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification/{{IDAS01}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"path": [
								"{{IDAS01}}"
							]
						},
						"description": "This operation search for one of the created agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification/{{IDAS02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification/{{IDAS02}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"path": [
								"{{IDAS02}}"
							]
						},
						"description": "This operation search for the other one of the created agreementSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/agreementSpecification?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?fields=name",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?name={{NAMEAS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?name={{NAMEAS01}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAS01}}"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?name={{NAMEAS02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?name={{NAMEAS02}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAS02}}"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?fields=id",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?id={{IDAS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?id={{IDAS01}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDAS01}}"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?id={{IDAS02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?id={{IDAS02}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDAS02}}"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?fields=name",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?name={{NAMEAS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS01');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS01');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS01\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS01');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS01\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS01');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS01');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS01\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS01');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS01\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('IDAS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?name={{NAMEAS01}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAS01}}"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				},
				{
					"name": "/agreementSpecification?name={{NAMEAS02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['attachment', 'name', '@type', 'href', 'id', 'name', 'attachment'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has attachment attribute', function() { pm.expect(instance[\"attachment\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAS02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAS02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAS02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAS02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAS02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAS02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAS02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAS02');});",
									"            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLEAS02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLEAS02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEAS02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEAS02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSAS02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSAS02');});",
									"            pm.test('validFor is ' + pm.globals.get(\"VALIDFORAS02\"), function() {pm.expect(instance['validFor']) == pm.globals.get('VALIDFORAS02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAS02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAS02');});",
									"            pm.test('serviceCategory is ' + pm.globals.get(\"SERVICECATEGORYAS02\"), function() {pm.expect(instance['serviceCategory']) == pm.globals.get('SERVICECATEGORYAS02');});",
									"            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYAS02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYAS02');});",
									"            pm.test('specificationCharacteristic is ' + pm.globals.get(\"SPECIFICATIONCHARACTERISTICAS02\"), function() {pm.expect(instance['specificationCharacteristic']) == pm.globals.get('SPECIFICATIONCHARACTERISTICAS02');});",
									"            pm.test('specificationRelationship is ' + pm.globals.get(\"SPECIFICATIONRELATIONSHIPAS02\"), function() {pm.expect(instance['specificationRelationship']) == pm.globals.get('SPECIFICATIONRELATIONSHIPAS02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAS01\")) {",
									"            pm.test('IDAS01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification?name={{NAMEAS02}}",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAS02}}"
								}
							]
						},
						"description": "This operation filter a agreementSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/agreementSpecification/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreementSpecification/1747feaf-2621-469c-9a73-a5b0c8c3f541",
							"host": [
								"{{Agreement_API}}agreementSpecification"
							],
							"path": [
								"1747feaf-2621-469c-9a73-a5b0c8c3f541"
							]
						},
						"description": "This operation search for one of the created agreementSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "N1",
			"item": [
				{
					"name": "/agreement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"",
									"pm.globals.set('@BASETYPEAG01', instance['@baseType']);",
									"pm.globals.set('@SCHEMALOCATIONAG01', instance['@schemaLocation']);",
									"pm.globals.set('HREFAG01', instance['href']);",
									"pm.globals.set('IDAG01', instance['id']);",
									"pm.globals.set('AGREEMENTPERIODAG01', instance['agreementPeriod']);",
									"pm.globals.set('AGREEMENTTYPEAG01', instance['agreementType']);",
									"pm.globals.set('COMPLETIONDATEAG01', instance['completionDate']);",
									"pm.globals.set('DESCRIPTIONAG01', instance['description']);",
									"pm.globals.set('DOCUMENTNUMBERAG01', instance['documentNumber']);",
									"pm.globals.set('INITIALDATEAG01', instance['initialDate']);",
									"pm.globals.set('NAMEAG01', instance['name']);",
									"pm.globals.set('STATEMENTOFINTENTAG01', instance['statementOfIntent']);",
									"pm.globals.set('STATUSAG01', instance['status']);",
									"pm.globals.set('VERSIONAG01', instance['version']);",
									"pm.globals.set('ASSOCIATEDAGREEMENTAG01', instance['associatedAgreement']);",
									"pm.globals.set('CHARACTERISTICAG01', instance['characteristic']);",
									"pm.globals.set('AGREEMENTSPECIFICATIONAG01', instance['agreementSpecification']);",
									"pm.globals.set('AGREEMENTAUTHORIZATIONAG01', instance['agreementAuthorization']);",
									"",
									"pm.test('Body includes value held on agreementType', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on agreementType', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Summer Contract Agreement\", \n    \"agreementType\": \"commercial\", \n    \"agreementItem\": [\n        {\n           \n            \"termOrCondition\": [\n                {\n                    \"description\": \"This  agreement term or condition ...\", \n                    \"id\": \"5890\", \n                    \"validFor\": {\n                        \"startDateTime\": \"2018-04-25T00:00:00.000Z\", \n                        \"endDateTime\": \"2018-11-20T00:00:00.000Z\"\n                    }\n                }\n            ]\n        }\n    ], \n    \"engagedPartyRole\": [\n        {\n            \"@referredType\": \"Organization\",\n            \"id\": \"330\", \n            \"role\": \"Supplier\", \n            \"name\": \"Magic Tools Company\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{Agreement_API}}agreement",
							"host": [
								"{{Agreement_API}}agreement"
							]
						},
						"description": "This operation creates a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"",
									"pm.globals.set('@BASETYPEAG02', instance['@baseType']);",
									"pm.globals.set('@SCHEMALOCATIONAG02', instance['@schemaLocation']);",
									"pm.globals.set('HREFAG02', instance['href']);",
									"pm.globals.set('IDAG02', instance['id']);",
									"pm.globals.set('AGREEMENTPERIODAG02', instance['agreementPeriod']);",
									"pm.globals.set('AGREEMENTTYPEAG02', instance['agreementType']);",
									"pm.globals.set('COMPLETIONDATEAG02', instance['completionDate']);",
									"pm.globals.set('DESCRIPTIONAG02', instance['description']);",
									"pm.globals.set('DOCUMENTNUMBERAG02', instance['documentNumber']);",
									"pm.globals.set('INITIALDATEAG02', instance['initialDate']);",
									"pm.globals.set('NAMEAG02', instance['name']);",
									"pm.globals.set('STATEMENTOFINTENTAG02', instance['statementOfIntent']);",
									"pm.globals.set('STATUSAG02', instance['status']);",
									"pm.globals.set('VERSIONAG02', instance['version']);",
									"pm.globals.set('ASSOCIATEDAGREEMENTAG02', instance['associatedAgreement']);",
									"pm.globals.set('CHARACTERISTICAG02', instance['characteristic']);",
									"pm.globals.set('AGREEMENTSPECIFICATIONAG02', instance['agreementSpecification']);",
									"pm.globals.set('AGREEMENTAUTHORIZATIONAG02', instance['agreementAuthorization']);",
									"",
									"pm.test('Body includes value held on agreementType', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on agreementType', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Winter Contract Agreement\", \n    \"agreementType\": \"commercial\", \n    \"agreementItem\": [\n        {\n            \"productOffering\": [\n                {\n\t\"@referredType\": \"ProductOffering\",\n                    \"id\": \"9085\", \n                    \"name\": \"My Quick BB Offer\"\n                }\n            ], \n            \"termOrCondition\": [\n                {\n                    \"description\": \"This  agreement term or condition ...\", \n                    \"id\": \"5890\", \n                    \"validFor\": {\n                        \"startDateTime\": \"2019-04-25T00:00:00.000Z\", \n                        \"endDateTime\": \"2019-11-20T00:00:00.000Z\"\n                    }\n                }\n            ]\n        }\n    ], \n    \"engagedPartyRole\": [\n        {\n            \"@referredType\": \"Organization\",\n            \"id\": \"330\", \n            \"role\": \"Supplier\", \n            \"name\": \"Magic Tools Company\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{Agreement_API}}agreement",
							"host": [
								"{{Agreement_API}}agreement"
							]
						},
						"description": "This operation creates another agreement"
					},
					"response": []
				},
				{
					"name": "/agreement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement",
							"host": [
								"{{Agreement_API}}agreement"
							]
						},
						"description": "This operation search for the created agreement"
					},
					"response": []
				},
				{
					"name": "/agreement/{{IDAG01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement/{{IDAG01}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"path": [
								"{{IDAG01}}"
							]
						},
						"description": "This operation search for one of the created agreement"
					},
					"response": []
				},
				{
					"name": "/agreement/{{IDAG02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement/{{IDAG02}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"path": [
								"{{IDAG02}}"
							]
						},
						"description": "This operation search for the other one of the created agreement"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/agreement?fields=agreementType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?fields=agreementType",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "fields",
									"value": "agreementType"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?agreementType={{AGREEMENTTYPEAG01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?agreementType={{AGREEMENTTYPEAG01}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "agreementType",
									"value": "{{AGREEMENTTYPEAG01}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?agreementType={{AGREEMENTTYPEAG02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?agreementType={{AGREEMENTTYPEAG02}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "agreementType",
									"value": "{{AGREEMENTTYPEAG02}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?fields=name",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?name={{NAMEAG01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?name={{NAMEAG01}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAG01}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?name={{NAMEAG02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?name={{NAMEAG02}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAG02}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?fields=id",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?id={{IDAG01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?id={{IDAG01}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDAG01}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?id={{IDAG02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?id={{IDAG02}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDAG02}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?fields=agreementType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?fields=agreementType",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "fields",
									"value": "agreementType"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?agreementType={{AGREEMENTTYPEAG01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?agreementType={{AGREEMENTTYPEAG01}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "agreementType",
									"value": "{{AGREEMENTTYPEAG01}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?agreementType={{AGREEMENTTYPEAG02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?agreementType={{AGREEMENTTYPEAG02}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "agreementType",
									"value": "{{AGREEMENTTYPEAG02}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?fields=name",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?name={{NAMEAG01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG01\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG01');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG01\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG01');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG01\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG01');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG01\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG01');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG01\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG01');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG01');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG01\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG01');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG01\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG01');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG01\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG01');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG01\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG01');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG01\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG01');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG01\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG01');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG01\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG01');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG01\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('IDAG02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?name={{NAMEAG01}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAG01}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				},
				{
					"name": "/agreement?name={{NAMEAG02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['agreementItem', 'agreementType', 'engagedPartyRole', 'name', '@type', 'href', 'id', 'agreementType', 'name', 'engagedPartyRole'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has agreementItem attribute', function() { pm.expect(instance[\"agreementItem\"]).to.be.a('array'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has agreementType attribute', function() { pm.expect(instance[\"agreementType\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has engagedPartyRole attribute', function() { pm.expect(instance[\"engagedPartyRole\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on agreementType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['agreementType']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDAG02\")) {",
									"            pm.test('@baseType is ' + pm.globals.get(\"@BASETYPEAG02\"), function() {pm.expect(instance['@baseType']) == pm.globals.get('@BASETYPEAG02');});",
									"            pm.test('@schemaLocation is ' + pm.globals.get(\"@SCHEMALOCATIONAG02\"), function() {pm.expect(instance['@schemaLocation']) == pm.globals.get('@SCHEMALOCATIONAG02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFAG02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAG02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDAG02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAG02');});",
									"            pm.test('agreementPeriod is ' + pm.globals.get(\"AGREEMENTPERIODAG02\"), function() {pm.expect(instance['agreementPeriod']) == pm.globals.get('AGREEMENTPERIODAG02');});",
									"            pm.test('agreementType is ' + pm.globals.get(\"AGREEMENTTYPEAG02\"), function() {pm.expect(instance['agreementType']) == pm.globals.get('AGREEMENTTYPEAG02');});",
									"            pm.test('completionDate is ' + pm.globals.get(\"COMPLETIONDATEAG02\"), function() {pm.expect(instance['completionDate']) == pm.globals.get('COMPLETIONDATEAG02');});",
									"            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONAG02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONAG02');});",
									"            pm.test('documentNumber is ' + pm.globals.get(\"DOCUMENTNUMBERAG02\"), function() {pm.expect(instance['documentNumber']) == pm.globals.get('DOCUMENTNUMBERAG02');});",
									"            pm.test('initialDate is ' + pm.globals.get(\"INITIALDATEAG02\"), function() {pm.expect(instance['initialDate']) == pm.globals.get('INITIALDATEAG02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEAG02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEAG02');});",
									"            pm.test('statementOfIntent is ' + pm.globals.get(\"STATEMENTOFINTENTAG02\"), function() {pm.expect(instance['statementOfIntent']) == pm.globals.get('STATEMENTOFINTENTAG02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSAG02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAG02');});",
									"            pm.test('version is ' + pm.globals.get(\"VERSIONAG02\"), function() {pm.expect(instance['version']) == pm.globals.get('VERSIONAG02');});",
									"            pm.test('associatedAgreement is ' + pm.globals.get(\"ASSOCIATEDAGREEMENTAG02\"), function() {pm.expect(instance['associatedAgreement']) == pm.globals.get('ASSOCIATEDAGREEMENTAG02');});",
									"            pm.test('characteristic is ' + pm.globals.get(\"CHARACTERISTICAG02\"), function() {pm.expect(instance['characteristic']) == pm.globals.get('CHARACTERISTICAG02');});",
									"            pm.test('agreementSpecification is ' + pm.globals.get(\"AGREEMENTSPECIFICATIONAG02\"), function() {pm.expect(instance['agreementSpecification']) == pm.globals.get('AGREEMENTSPECIFICATIONAG02');});",
									"            pm.test('agreementAuthorization is ' + pm.globals.get(\"AGREEMENTAUTHORIZATIONAG02\"), function() {pm.expect(instance['agreementAuthorization']) == pm.globals.get('AGREEMENTAUTHORIZATIONAG02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDAG01\")) {",
									"            pm.test('IDAG01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement?name={{NAMEAG02}}",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEAG02}}"
								}
							]
						},
						"description": "This operation filter a agreement"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/agreement/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Agreement_API}}agreement/dd744e24-2d1d-4b79-b0bd-f3f0231508ad",
							"host": [
								"{{Agreement_API}}agreement"
							],
							"path": [
								"dd744e24-2d1d-4b79-b0bd-f3f0231508ad"
							]
						},
						"description": "This operation search for one of the created agreement"
					},
					"response": []
				}
			]
		}
	]
}