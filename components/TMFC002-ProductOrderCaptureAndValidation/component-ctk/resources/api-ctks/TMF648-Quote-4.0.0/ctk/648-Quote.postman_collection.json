{
	"info": {
		"_postman_id": "90cdda32-f8fe-4092-a875-6dde7d8797ed",
		"name": "CTK-648-Quote-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7503975"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('IDQU01', instance['id']);",
									"pm.globals.set('HREFQU01', instance['href']);",
									"pm.globals.set('QUOTEDATEQU01', instance['quoteDate']);",
									"pm.globals.set('STATEQU01', instance['state']);",
									"pm.globals.set('QUOTEITEMQU01', instance['quoteItem']);",
									"",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on quoteDate', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"});",
									"pm.test('Body includes value held on state', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['state']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"add\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Quote_API}}quote",
							"host": [
								"{{Quote_API}}quote"
							]
						},
						"description": "This operation creates a quote"
					},
					"response": []
				},
				{
					"name": "/quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    ",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote",
							"host": [
								"{{Quote_API}}quote"
							]
						},
						"description": "This operation search for the created quote"
					},
					"response": []
				},
				{
					"name": "/quote/{{IDQU01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('IDQU02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('IDQU02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote/{{IDQU01}}",
							"host": [
								"{{Quote_API}}quote"
							],
							"path": [
								"{{IDQU01}}"
							]
						},
						"description": "This operation search for one of the created quote"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('IDQU02', instance['id']);",
									"pm.globals.set('HREFQU02', instance['href']);",
									"pm.globals.set('QUOTEDATEQU02', instance['quoteDate']);",
									"pm.globals.set('STATEQU02', instance['state']);",
									"",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on quoteDate', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"});",
									"pm.test('Body includes value held on state', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['state']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"quoteItem\": [\n    {\n      \"id\": \"1\",\n      \"action\": \"add\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Quote_API}}quote",
							"host": [
								"{{Quote_API}}quote"
							]
						},
						"description": "This operation creates another quote"
					},
					"response": []
				},
				{
					"name": "/quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    ",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote",
							"host": [
								"{{Quote_API}}quote"
							]
						},
						"description": "This operation search for the created quote"
					},
					"response": []
				},
				{
					"name": "/quote/{{IDQU02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('IDQU01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"  ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('IDQU01 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote/{{IDQU02}}",
							"host": [
								"{{Quote_API}}quote"
							],
							"path": [
								"{{IDQU02}}"
							]
						},
						"description": "This operation search for the other one of the created quote"
					},
					"response": []
				}
			]
		},
		{
			"name": "N3",
			"item": [
				{
					"name": "/quote?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href'];",
									"      ",
									"        pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"      ",
									"    var requiredAttributes = ['id', 'href'];",
									"      ",
									"    pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"    } ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?fields=id",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				},
				{
					"name": "/quote?id={{IDQU01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('IDQU02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has price attribute', function() { pm.expect(instance[\"price\"]).to.be.a('array'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('IDQU02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?id={{IDQU01}}",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDQU01}}"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				},
				{
					"name": "/quote?id={{IDQU02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('IDQU01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state', 'price', 'priceAlteration'];",
									"  ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    pm.test('Response has price attribute', function() { pm.expect(instance[\"price\"]).to.be.a('array'); });",
									"    pm.test('Response has priceAlteration attribute', function() { pm.expect(instance[\"priceAlteration\"]).to.be.a('array'); });",
									"  ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('IDQU01 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?id={{IDQU02}}",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDQU02}}"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				},
				{
					"name": "/quote?fields=href",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href'];",
									"      ",
									"        pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"      ",
									"    var requiredAttributes = ['id', 'href'];",
									"      ",
									"    pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"    } ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?fields=href",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "fields",
									"value": "href"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				},
				{
					"name": "/quote?href={{HREFQU01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('IDQU02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"   ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('IDQU02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?href={{HREFQU01}}",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "href",
									"value": "{{HREFQU01}}"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				},
				{
					"name": "/quote?href={{HREFQU02}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('IDQU01 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['quoteItem', 'id', 'href', 'quoteDate', 'state'];",
									"  ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has quoteItem attribute', function() { pm.expect(instance[\"quoteItem\"]).to.be.a('array'); });",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('IDQU01 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?href={{HREFQU02}}",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "href",
									"value": "{{HREFQU02}}"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				},
				{
					"name": "/quote?fields=quoteDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'quoteDate'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on quoteDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"            pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    ",
									"    var requiredAttributes = ['id', 'href', 'quoteDate'];",
									"      ",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has quoteDate attribute', function() { pm.expect(instance[\"quoteDate\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on quoteDate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['quoteDate']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU01\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        pm.test('quoteDate is ' + pm.globals.get(\"QUOTEDATEQU02\"), function() {pm.expect(instance['quoteDate']) == pm.globals.get('QUOTEDATEQU02');});",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?fields=quoteDate",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "fields",
									"value": "quoteDate"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				},
				{
					"name": "/quote?fields=state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"        pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"        }  ",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    ",
									"    var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"    pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU02');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU02');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU02');});",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?fields=state",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "fields",
									"value": "state"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				}
			]
		},
		{
			"name": "N4",
			"item": [
				{
					"name": "/quote/{{IDQU01}}?fields=id,href,state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"        pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('IDQU02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"    pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('IDQU02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote/{{IDQU01}}?fields=id,href,state",
							"host": [
								"{{Quote_API}}quote"
							],
							"path": [
								"{{IDQU01}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "id,href,state"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				}
			]
		},
		{
			"name": "N5",
			"item": [
				{
					"name": "/quotequote?id={{IDQU01}}&fields=id,href,state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"        pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"        ",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on state', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['state']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"            pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"            pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"            pm.test('IDQU02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['id', 'href', 'state'];",
									"      ",
									"    pm.test('Instance has all filtered attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"  ",
									"    pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has state attribute', function() { pm.expect(instance[\"state\"]).to.be.a('string'); });",
									"    ",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on state', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['state']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDQU01\")) {",
									"        pm.test('id is ' + pm.globals.get(\"IDQU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDQU01');});",
									"        pm.test('href is ' + pm.globals.get(\"HREFQU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFQU01');});",
									"        pm.test('state is ' + pm.globals.get(\"STATEQU01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATEQU01');});",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDQU02\")) {",
									"        pm.test('IDQU02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote?id={{IDQU01}}&fields=id,href,state",
							"host": [
								"{{Quote_API}}quote"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDQU01}}"
								},
								{
									"key": "fields",
									"value": "id,href,state"
								}
							]
						},
						"description": "This operation filter a quote"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/quote/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Quote_API}}quote/3z06z842-763z4z2z-80z1-875zz14z6zz4",
							"host": [
								"{{Quote_API}}quote"
							],
							"path": [
								"3z06z842-763z4z2z-80z1-875zz14z6zz4"
							]
						},
						"description": "This operation search for one of the created quote"
					},
					"response": []
				}
			]
		},
		{
			"name": "E2",
			"item": [
				{
					"name": "unexpecting parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"state\": \"waiting\",\n  \"price\": \"exwwhfbpyy\",\n  \"priceAlteration\": \"tcnggzatst\"\n}"
						},
						"url": {
							"raw": "{{Quote_API}}quote",
							"host": [
								"{{Quote_API}}quote"
							]
						},
						"description": "This operation creates a quote"
					},
					"response": []
				}
			]
		},
		{
			"name": "E3",
			"item": [
				{
					"name": "missing mandatory parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"priceAlteration\": \"tcnggzatst\"\n}"
						},
						"url": {
							"raw": "{{Quote_API}}quote",
							"host": [
								"{{Quote_API}}quote"
							]
						},
						"description": "This operation creates a quote"
					},
					"response": []
				}
			]
		}
	]
}