{
	"info": {
		"_postman_id": "85e115ad-28fa-4186-a90c-6a45f8b05ab7",
		"name": "CTK-Product_Catalog-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7503975",
		"_collection_link": "https://cloudy-meadow-674386.postman.co/workspace/v4.0.0CTKs~c3a3165b-0479-4ccd-bebb-f737fd593b7f/collection/7503975-85e115ad-28fa-4186-a90c-6a45f8b05ab7?action=share&creator=7503975&source=collection_link"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/ProductSpecification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"",
									"if (instance['isBundle'] !== undefined && instance['isBundle'] == true){",
									"  requiredAttributes.push('bundledProductSpecification')",
									"}",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"",
									"",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('HREFPS01', instance['href']);",
									"pm.globals.set('IDPS01', instance['id']);",
									"pm.globals.set('LASTUPDATEPS01', instance['lastUpdate']);",
									"pm.globals.set('LIFECYCLESTATUSPS01', instance['lifecycleStatus']);",
									"pm.globals.set('NAMEPS01', instance['name']);",
									"",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on lastUpdate', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"});",
									"pm.test('Body includes value held on lifecycleStatus', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Cisco Firepower NGFW\"\n}"
						},
						"url": {
							"raw": "{{Product_Catalog}}productSpecification",
							"host": [
								"{{Product_Catalog}}productSpecification"
							]
						},
						"description": "This operation creates a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"",
									"        if (instance['isBundle'] !== undefined && instance['isBundle'] == true) {",
									"            requiredAttributes.push('bundledProductSpecification')",
									"            pm.test('Response has bundledProductSpecification attribute', function () { pm.expect(instance[\"bundledProductSpecification\"]).to.be.a('array'); });",
									"        }",
									"",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"",
									"",
									"        ",
									"        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function () { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function () { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function () { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPS01'); });",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPS01'); });",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01'); });",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01'); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPS01'); });",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPS02'); });",
									"            pm.test('id is ' + pm.globals.get(\"IDPS02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPS02'); });",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS02\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS02'); });",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS02\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS02'); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS02\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPS02'); });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"",
									"    if (instance['isBundle'] !== undefined && instance['isBundle'] == true) {",
									"        requiredAttributes.push('bundledProductSpecification')",
									"    }",
									"",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"",
									"",
									"    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has lastUpdate attribute', function () { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"    pm.test('Response has lifecycleStatus attribute', function () { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function () { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on lastUpdate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"    });",
									"    pm.test('Body includes value held on lifecycleStatus', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"    });",
									"    pm.test('Body includes value held on name', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['name']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"        pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPS01'); });",
									"        pm.test('id is ' + pm.globals.get(\"IDPS01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPS01'); });",
									"        pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01'); });",
									"        pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01'); });",
									"        pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPS01'); });",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"        pm.test('href is ' + pm.globals.get(\"HREFPS02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPS02'); });",
									"        pm.test('id is ' + pm.globals.get(\"IDPS02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPS02'); });",
									"        pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS02\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS02'); });",
									"        pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS02\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS02'); });",
									"        pm.test('name is ' + pm.globals.get(\"NAMEPS02\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPS02'); });",
									"    }",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification",
							"host": [
								"{{Product_Catalog}}productSpecification"
							]
						},
						"description": "This operation search for the created ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification/{{IDPS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification/{{IDPS01}}",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"path": [
								"{{IDPS01}}"
							]
						},
						"description": "This operation search for one of the created ProductSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/ProductSpecification?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?fields=id",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification?id={{IDPS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?id={{IDPS01}}",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDPS01}}"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification?fields=lastUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?fields=lastUpdate",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "lastUpdate"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification?lastUpdate={{LASTUPDATEPS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?lastUpdate={{LASTUPDATEPS01}}",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "lastUpdate",
									"value": "{{LASTUPDATEPS01}}"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification?fields=lifecycleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?fields=lifecycleStatus",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "lifecycleStatus"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification?lifecycleStatus={{LIFECYCLESTATUSPS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?lifecycleStatus={{LIFECYCLESTATUSPS01}}",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "lifecycleStatus",
									"value": "{{LIFECYCLESTATUSPS01}}"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?fields=name",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				},
				{
					"name": "/ProductSpecification?name={{NAMEPS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPS01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPS01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPS01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPS01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPS02\")) {",
									"            pm.test('IDPS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification?name={{NAMEPS01}}",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEPS01}}"
								}
							]
						},
						"description": "This operation filter a ProductSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/ProductSpecification/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productSpecification/279edf2b-0130-4c8f-8277-f81daa05d87d",
							"host": [
								"{{Product_Catalog}}productSpecification"
							],
							"path": [
								"279edf2b-0130-4c8f-8277-f81daa05d87d"
							]
						},
						"description": "This operation search for one of the created ProductSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "N1",
			"item": [
				{
					"name": "/ProductOffering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"",
									"",
									"",
									"var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"if (instance['isBundle'] !== undefined && instance['isBundle'] == true){",
									"  requiredAttributes.push('bundledProductSpecification')",
									"}",
									"if (instance['isBundle'] === undefined || instance['isBundle'] == false){",
									"  requiredAttributes.push('productSpecification')",
									"  pm.test('Response has productSpecification attribute', function () { pm.expect(instance[\"productSpecification\"]).to.be.an('object'); });",
									"",
									"}",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('HREFPO01', instance['href']);",
									"pm.globals.set('IDPO01', instance['id']);",
									"pm.globals.set('LASTUPDATEPO01', instance['lastUpdate']);",
									"pm.globals.set('LIFECYCLESTATUSPO01', instance['lifecycleStatus']);",
									"pm.globals.set('NAMEPO01', instance['name']);",
									"",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on lastUpdate', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"});",
									"pm.test('Body includes value held on lifecycleStatus', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"aProductOffering\",\n    \"productSpecification\": {\n        \"id\": \"9881\",\n        \"href\": \"https://mycsp.com:8080/tmf-api/productCatalogManagement/v4/productSpecification/9881\",\n        \"version\": \"1.1\",\n        \"name\": \"Robotics999\",\n        \"@referredType\": \"DeviceSpecification\"\n    }\n}"
						},
						"url": {
							"raw": "{{Product_Catalog}}productOffering",
							"host": [
								"{{Product_Catalog}}productOffering"
							]
						},
						"description": "This operation creates a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"",
									"",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"        if (instance['isBundle'] !== undefined && instance['isBundle'] == true) {",
									"            requiredAttributes.push('bundledProductOffering')",
									"        }",
									"        if (instance['isBundle'] === undefined || instance['isBundle'] == false) {",
									"            requiredAttributes.push('productSpecification')",
									"        }",
									"",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function () { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function () { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function () { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPO01'); });",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPO01'); });",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01'); });",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01'); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPO01'); });",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPO02'); });",
									"            pm.test('id is ' + pm.globals.get(\"IDPO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPO02'); });",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO02\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO02'); });",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO02\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO02'); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO02\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPO02'); });",
									"        }",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"",
									"",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"    if (instance['isBundle'] !== undefined && instance['isBundle'] == true) {",
									"        requiredAttributes.push('bundledProductOffering')",
									"    }",
									"    if (instance['isBundle'] === undefined || instance['isBundle'] == false) {",
									"        requiredAttributes.push('productSpecification')",
									"    }",
									"",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"",
									"    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has lastUpdate attribute', function () { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"    pm.test('Response has lifecycleStatus attribute', function () { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function () { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on lastUpdate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"    });",
									"    pm.test('Body includes value held on lifecycleStatus', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"    });",
									"    pm.test('Body includes value held on name', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['name']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"        pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPO01'); });",
									"        pm.test('id is ' + pm.globals.get(\"IDPO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPO01'); });",
									"        pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01'); });",
									"        pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01'); });",
									"        pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPO01'); });",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"        pm.test('href is ' + pm.globals.get(\"HREFPO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPO02'); });",
									"        pm.test('id is ' + pm.globals.get(\"IDPO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPO02'); });",
									"        pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO02\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO02'); });",
									"        pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO02\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO02'); });",
									"        pm.test('name is ' + pm.globals.get(\"NAMEPO02\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPO02'); });",
									"    }",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering",
							"host": [
								"{{Product_Catalog}}productOffering"
							]
						},
						"description": "This operation search for the created ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering/{{IDPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"",
									"",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"        if (instance['isBundle'] !== undefined && instance['isBundle'] == true) {",
									"            requiredAttributes.push('bundledProductOffering')",
									"        }",
									"        if (instance['isBundle'] === undefined || instance['isBundle'] == false) {",
									"            requiredAttributes.push('productSpecification')",
									"            pm.test('Response has productSpecification attribute', function () { pm.expect(instance[\"productSpecification\"]).to.be.an('object'); });",
									"",
									"        }",
									"",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"",
									"        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function () { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function () { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function () { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPO01'); });",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPO01'); });",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01'); });",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01'); });",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPO01'); });",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"    });",
									"}",
									"else {",
									"    var instance = pm.response.json();",
									"",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"    if (instance['isBundle'] !== undefined && instance['isBundle'] == true) {",
									"        requiredAttributes.push('bundledProductOffering')",
									"    }",
									"    if (instance['isBundle'] === undefined || instance['isBundle'] == false) {",
									"        requiredAttributes.push('productSpecification')",
									"        pm.test('Response has productSpecification attribute', function () { pm.expect(instance[\"productSpecification\"]).to.be.an('object'); });",
									"",
									"    }",
									"",
									"    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"",
									"    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"    pm.test('Response has lastUpdate attribute', function () { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"    pm.test('Response has lifecycleStatus attribute', function () { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"    pm.test('Response has name attribute', function () { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"",
									"    pm.test('Body includes value held on href', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['href']);",
									"    });",
									"    pm.test('Body includes value held on id', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['id']);",
									"    });",
									"    pm.test('Body includes value held on lastUpdate', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"    });",
									"    pm.test('Body includes value held on lifecycleStatus', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"    });",
									"    pm.test('Body includes value held on name', function () {",
									"        pm.expect(pm.response.text()).to.include(instance['name']);",
									"    });",
									"    // Individualized tests",
									"    if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"        pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFPO01'); });",
									"        pm.test('id is ' + pm.globals.get(\"IDPO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDPO01'); });",
									"        pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function () { pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01'); });",
									"        pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function () { pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01'); });",
									"        pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function () { pm.expect(instance['name']) == pm.globals.get('NAMEPO01'); });",
									"    }",
									"    if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"        pm.test('IDPO02 not expected on this test', function () {",
									"            console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"        });",
									"    }",
									"",
									"",
									"",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering/{{IDPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"path": [
								"{{IDPO01}}"
							]
						},
						"description": "This operation search for one of the created ProductOffering"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/ProductOffering?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?fields=id",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering?id={{IDPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?id={{IDPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDPO01}}"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering?fields=lastUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?fields=lastUpdate",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "fields",
									"value": "lastUpdate"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering?lastUpdate={{LASTUPDATEPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?lastUpdate={{LASTUPDATEPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "lastUpdate",
									"value": "{{LASTUPDATEPO01}}"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering?fields=lifecycleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?fields=lifecycleStatus",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "fields",
									"value": "lifecycleStatus"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering?lifecycleStatus={{LIFECYCLESTATUSPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?lifecycleStatus={{LIFECYCLESTATUSPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "lifecycleStatus",
									"value": "{{LIFECYCLESTATUSPO01}}"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?fields=name",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering?name={{NAMEPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPO01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPO01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPO01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPO01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPO01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPO01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPO01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPO02\")) {",
									"            pm.test('IDPO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering?name={{NAMEPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEPO01}}"
								}
							]
						},
						"description": "This operation filter a ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering/{{IDPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PATCH request\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var instance = pm.response.json();",
									"",
									"pm.test(\"Your test name\", function () {",
									"    pm.expect(instance.name).to.eql('anotherProductOffering');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"anotherProductOffering\"}"
						},
						"url": {
							"raw": "{{Product_Catalog}}productOffering/{{IDPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"path": [
								"{{IDPO01}}"
							]
						},
						"description": "This operation search for one of the created ProductOffering"
					},
					"response": []
				},
				{
					"name": "/ProductOffering/{{IDPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{Product_Catalog}}productOffering/{{IDPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"path": [
								"{{IDPO01}}"
							]
						},
						"description": "This operation search for one of the created ProductOffering"
					},
					"response": []
				},
				{
					"name": "{{Product_Catalog}}productOffering/{{IDPO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering/{{IDPO01}}",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"path": [
								"{{IDPO01}}"
							]
						},
						"description": "This operation search for one of the created ProductOffering"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/ProductOffering/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOffering/1ab18f13-2bd2-434d-9788-4b72ec11fe8a",
							"host": [
								"{{Product_Catalog}}productOffering"
							],
							"path": [
								"1ab18f13-2bd2-434d-9788-4b72ec11fe8a"
							]
						},
						"description": "This operation search for one of the created ProductOffering"
					},
					"response": []
				}
			]
		},
		{
			"name": "N1",
			"item": [
				{
					"name": "/ProductOfferingPrice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) {",
									"",
									"  pm.test('Array not expected as response', function () { pm.expect.fail() });",
									"",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"",
									"",
									"",
									"if (instance['isBundle'] !== undefined && instance['isBundle'] == true) {",
									"  requiredAttributes.push('bundledPopRelationship')",
									"}",
									"if (instance['isBundle'] === undefined || instance['isBundle'] == false) {",
									"  requiredAttributes.push('priceType')",
									"  pm.test('Response has priceType attribute', function () { pm.expect(instance[\"priceType\"]).to.be.an('string'); });",
									"",
									"}",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has lastUpdate attribute', function () { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"pm.test('Response has lifecycleStatus attribute', function () { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function () { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has priceType attribute', function () { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('HREFPOP01', instance['href']);",
									"pm.globals.set('IDPOP01', instance['id']);",
									"pm.globals.set('LASTUPDATEPOP01', instance['lastUpdate']);",
									"pm.globals.set('LIFECYCLESTATUSPOP01', instance['lifecycleStatus']);",
									"pm.globals.set('NAMEPOP01', instance['name']);",
									"pm.globals.set('PRICETYPEPOP01', instance['priceType']);",
									"",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on lastUpdate', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"});",
									"pm.test('Body includes value held on lifecycleStatus', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									"pm.test('Body includes value held on priceType', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{    \"name\": \"Recurring Charge for Business Firewall\",\n    \"isBundle\": false,\n    \"priceType\": \"recurring\"\n}"
						},
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							]
						},
						"description": "This operation creates a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP02');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP02\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP02');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP02\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP02');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP02\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP02');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP02\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							]
						},
						"description": "This operation search for the created ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice/{{IDPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice/{{IDPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"path": [
								"{{IDPOP01}}"
							]
						},
						"description": "This operation search for one of the created ProductOfferingPrice"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/ProductOfferingPrice?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?fields=id",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?id={{IDPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?id={{IDPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDPOP01}}"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?fields=lastUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?fields=lastUpdate",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "fields",
									"value": "lastUpdate"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?lastUpdate={{LASTUPDATEPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?lastUpdate={{LASTUPDATEPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "lastUpdate",
									"value": "{{LASTUPDATEPOP01}}"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?fields=lifecycleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?fields=lifecycleStatus",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "fields",
									"value": "lifecycleStatus"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?lifecycleStatus={{LIFECYCLESTATUSPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?lifecycleStatus={{LIFECYCLESTATUSPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "lifecycleStatus",
									"value": "{{LIFECYCLESTATUSPOP01}}"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?fields=name",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?name={{NAMEPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?name={{NAMEPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMEPOP01}}"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?fields=priceType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?fields=priceType",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "fields",
									"value": "priceType"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice?priceType={{PRICETYPEPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'lastUpdate', 'lifecycleStatus', 'name'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has lastUpdate attribute', function() { pm.expect(instance[\"lastUpdate\"]).to.be.a('string'); });",
									"        pm.test('Response has lifecycleStatus attribute', function() { pm.expect(instance[\"lifecycleStatus\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has priceType attribute', function() { pm.expect(instance[\"priceType\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on lastUpdate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lastUpdate']);",
									"        });",
									"        pm.test('Body includes value held on lifecycleStatus', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['lifecycleStatus']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        pm.test('Body includes value held on priceType', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['priceType']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDPOP01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFPOP01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFPOP01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDPOP01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDPOP01');});",
									"            pm.test('lastUpdate is ' + pm.globals.get(\"LASTUPDATEPOP01\"), function() {pm.expect(instance['lastUpdate']) == pm.globals.get('LASTUPDATEPOP01');});",
									"            pm.test('lifecycleStatus is ' + pm.globals.get(\"LIFECYCLESTATUSPOP01\"), function() {pm.expect(instance['lifecycleStatus']) == pm.globals.get('LIFECYCLESTATUSPOP01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMEPOP01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMEPOP01');});",
									"            pm.test('priceType is ' + pm.globals.get(\"PRICETYPEPOP01\"), function() {pm.expect(instance['priceType']) == pm.globals.get('PRICETYPEPOP01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDPOP02\")) {",
									"            pm.test('IDPOP02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice?priceType={{PRICETYPEPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"query": [
								{
									"key": "priceType",
									"value": "{{PRICETYPEPOP01}}"
								}
							]
						},
						"description": "This operation filter a ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice/{{IDPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PATCH request\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var instance = pm.response.json();",
									"",
									"pm.test(\"Your test name\", function () {",
									"    pm.expect(instance.name).to.eql('Renamed');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Renamed\"\n}"
						},
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice/{{IDPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"path": [
								"{{IDPOP01}}"
							]
						},
						"description": "This operation search for one of the created ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice/{{IDPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice/{{IDPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"path": [
								"{{IDPOP01}}"
							]
						},
						"description": "This operation search for one of the created ProductOfferingPrice"
					},
					"response": []
				},
				{
					"name": "/ProductOfferingPrice/{{IDPOP01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice/{{IDPOP01}}",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"path": [
								"{{IDPOP01}}"
							]
						},
						"description": "This operation search for one of the created ProductOfferingPrice"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/ProductOfferingPrice/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Product_Catalog}}productOfferingPrice/4c0edace-c19b-4c07-a7c4-0dd2fd046288",
							"host": [
								"{{Product_Catalog}}productOfferingPrice"
							],
							"path": [
								"4c0edace-c19b-4c07-a7c4-0dd2fd046288"
							]
						},
						"description": "This operation search for one of the created ProductOfferingPrice"
					},
					"response": []
				}
			]
		}
	]
}