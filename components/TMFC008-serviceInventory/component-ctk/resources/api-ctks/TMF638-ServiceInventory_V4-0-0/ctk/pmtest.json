{"info":{"_postman_id":"5cea0ced-c614-41b6-84b2-10330b86eaa0","name":"CTK-Service_Inventory-4.0.0","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"N1","item":[{"name":"/Service","event":[{"listen":"test","script":{"id":"c01ec730-3f29-4d7a-a7d2-444c6f200c8e","exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Successful POST request\", function () {","    pm.expect(pm.response.code).to.be.oneOf([201,202]);","});","","var instance = pm.response.json();","var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","","pm.globals.set('SUPPORTINGSERVICESE01', instance['supportingService']);","pm.globals.set('FEATURESE01', instance['feature']);","pm.globals.set('SERVICERELATIONSHIPSE01', instance['serviceRelationship']);","pm.globals.set('STATESE01', instance['state']);","pm.globals.set('RELATEDENTITYSE01', instance['relatedEntity']);","pm.globals.set('STARTMODESE01', instance['startMode']);","pm.globals.set('STARTDATESE01', instance['startDate']);","pm.globals.set('ISBUNDLESE01', instance['isBundle']);","pm.globals.set('SERVICEORDERITEMSE01', instance['serviceOrderItem']);","pm.globals.set('PLACESE01', instance['place']);","pm.globals.set('SERVICECHARACTERISTICSE01', instance['serviceCharacteristic']);","pm.globals.set('NOTESE01', instance['note']);","pm.globals.set('SERVICETYPESE01', instance['serviceType']);","pm.globals.set('SUPPORTINGRESOURCESE01', instance['supportingResource']);","pm.globals.set('HASSTARTEDSE01', instance['hasStarted']);","pm.globals.set('SERVICESPECIFICATIONSE01', instance['serviceSpecification']);","pm.globals.set('NAMESE01', instance['name']);","pm.globals.set('DESCRIPTIONSE01', instance['description']);","pm.globals.set('SERVICEDATESE01', instance['serviceDate']);","pm.globals.set('ENDDATESE01', instance['endDate']);","pm.globals.set('HREFSE01', instance['href']);","pm.globals.set('IDSE01', instance['id']);","pm.globals.set('RELATEDPARTYSE01', instance['relatedParty']);","pm.globals.set('ISSERVICEENABLEDSE01', instance['isServiceEnabled']);","pm.globals.set('ISSTATEFULSE01', instance['isStateful']);","pm.globals.set('CATEGORYSE01', instance['category']);","","pm.test('Body includes value held on state', function () {","  pm.expect(pm.response.text()).to.include(instance['state']);","});","","pm.test('Body includes value held on serviceDate', function () {","  pm.expect(pm.response.text()).to.include(instance['serviceDate']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"body":{"mode":"raw","raw":"{\n  \"state\": \"active\",\n  \"serviceSpecification\": {\n    \"id\": \"1212\",\n    \"@referredType\": \"ServiceSpecification\"\n  }\n}"},"url":{"raw":"{{Service_Inventory}}service","host":["{{Service_Inventory}}service"]},"description":"This operation creates a Service"},"response":[]},{"name":"/Service","event":[{"listen":"test","script":{"id":"b9b90099-84cb-43ec-9813-161c642d8656","exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) {","","  pm.test('Array not expected as response', function () { pm.expect.fail() });","","","}","","pm.test(\"Successful POST request\", function () {","  pm.expect(pm.response.code).to.be.oneOf([201, 202]);","});","","if (pm.response.code == 202) {","  setTimeout(function () { }, [pm.variables.get(\"delay\")]);","  postman.setNextRequest('get202')","}","else {","  var instance = pm.response.json();","  var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","","  pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","  pm.test('Response has serviceDate attribute', function () { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","  pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });","  pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });","","  pm.globals.set('SUPPORTINGSERVICESE02', instance['supportingService']);","  pm.globals.set('FEATURESE02', instance['feature']);","  pm.globals.set('SERVICERELATIONSHIPSE02', instance['serviceRelationship']);","  pm.globals.set('STATESE02', instance['state']);","  pm.globals.set('RELATEDENTITYSE02', instance['relatedEntity']);","  pm.globals.set('STARTMODESE02', instance['startMode']);","  pm.globals.set('STARTDATESE02', instance['startDate']);","  pm.globals.set('ISBUNDLESE02', instance['isBundle']);","  pm.globals.set('SERVICEORDERITEMSE02', instance['serviceOrderItem']);","  pm.globals.set('PLACESE02', instance['place']);","  pm.globals.set('SERVICECHARACTERISTICSE02', instance['serviceCharacteristic']);","  pm.globals.set('NOTESE02', instance['note']);","  pm.globals.set('SERVICETYPESE02', instance['serviceType']);","  pm.globals.set('SUPPORTINGRESOURCESE02', instance['supportingResource']);","  pm.globals.set('HASSTARTEDSE02', instance['hasStarted']);","  pm.globals.set('SERVICESPECIFICATIONSE02', instance['serviceSpecification']);","  pm.globals.set('NAMESE02', instance['name']);","  pm.globals.set('DESCRIPTIONSE02', instance['description']);","  pm.globals.set('SERVICEDATESE02', instance['serviceDate']);","  pm.globals.set('ENDDATESE02', instance['endDate']);","  pm.globals.set('HREFSE02', instance['href']);","  pm.globals.set('IDSE02', instance['id']);","  pm.globals.set('RELATEDPARTYSE02', instance['relatedParty']);","  pm.globals.set('ISSERVICEENABLEDSE02', instance['isServiceEnabled']);","  pm.globals.set('ISSTATEFULSE02', instance['isStateful']);","  pm.globals.set('CATEGORYSE02', instance['category']);","","  pm.test('Body includes value held on state', function () {","    pm.expect(pm.response.text()).to.include(instance['state']);","  });","  pm.test('Body includes value held on serviceDate', function () {","    pm.expect(pm.response.text()).to.include(instance['serviceDate']);","  });","  pm.test('Body includes value held on href', function () {","    pm.expect(pm.response.text()).to.include(instance['href']);","  });","  pm.test('Body includes value held on id', function () {","    pm.expect(pm.response.text()).to.include(instance['id']);","  });","}"],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"body":{"mode":"raw","raw":"{\n  \"state\": \"active\",\n  \"serviceSpecification\": {\n    \"id\": \"1212\",\n    \"@referredType\": \"ServiceSpecification\"\n  }\n}"},"url":{"raw":"{{Service_Inventory}}service","host":["{{Service_Inventory}}service"]},"description":"This operation creates another Service"},"response":[]},{"name":"/Service/{{IDSE01}}","event":[{"listen":"test","script":{"id":"374acb5c-b216-471f-b3b2-65f21a7dd3aa","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service/{{IDSE01}}","host":["{{Service_Inventory}}service"],"path":["{{IDSE01}}"]},"description":"This operation search for one of the created Service"},"response":[]},{"name":"/Service/{{IDSE02}}","event":[{"listen":"test","script":{"id":"508ae278-b2ba-481b-a1dc-e9ad66c6226f","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service/{{IDSE02}}","host":["{{Service_Inventory}}service"],"path":["{{IDSE02}}"]},"description":"This operation search for the other one of the created Service"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N2","item":[{"name":"/Service?fields=state","event":[{"listen":"test","script":{"id":"6c8581df-d2fe-48b3-9d21-db7baf6bcc2d","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?fields=state","host":["{{Service_Inventory}}service"],"query":[{"key":"fields","value":"state"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?state={{STATESE01}}","event":[{"listen":"test","script":{"id":"442e894f-cd7a-4e82-8150-ede594d81eb0","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?state={{STATESE01}}","host":["{{Service_Inventory}}service"],"query":[{"key":"state","value":"{{STATESE01}}"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?state={{STATESE02}}","event":[{"listen":"test","script":{"id":"b18ebaf0-41d4-4747-8c99-53118a955a38","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?state={{STATESE02}}","host":["{{Service_Inventory}}service"],"query":[{"key":"state","value":"{{STATESE02}}"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?fields=serviceSpecification","event":[{"listen":"test","script":{"id":"86b4e82d-c1f8-484f-8d39-3c70b56e4634","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?fields=serviceSpecification","host":["{{Service_Inventory}}service"],"query":[{"key":"fields","value":"serviceSpecification"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?fields=serviceDate","event":[{"listen":"test","script":{"id":"50e64586-e819-41e2-a5ee-eaded948ddf3","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?fields=serviceDate","host":["{{Service_Inventory}}service"],"query":[{"key":"fields","value":"serviceDate"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?serviceDate={{SERVICEDATESE01}}","event":[{"listen":"test","script":{"id":"0d288c9d-b208-470d-a4fa-a1ce0d14dd12","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?serviceDate=\"{{SERVICEDATESE01}}\"","host":["{{Service_Inventory}}service"],"query":[{"key":"serviceDate","value":"\"{{SERVICEDATESE01}}\""}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?serviceDate={{SERVICEDATESE02}}","event":[{"listen":"test","script":{"id":"185341eb-5022-4fe5-8f49-7fe05ed68abb","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceSpecification', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?serviceDate=\"{{SERVICEDATESE02}}\"","host":["{{Service_Inventory}}service"],"query":[{"key":"serviceDate","value":"\"{{SERVICEDATESE02}}\""}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?fields=href","event":[{"listen":"test","script":{"id":"c3b892e3-031d-40cc-bb94-c0665cbb6ed6","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?fields=href","host":["{{Service_Inventory}}service"],"query":[{"key":"fields","value":"href"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?href={{HREFSE01}}","event":[{"listen":"test","script":{"id":"03b7edd4-4211-4d09-8a83-7282d6d22552","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?href={{HREFSE01}}","host":["{{Service_Inventory}}service"],"query":[{"key":"href","value":"{{HREFSE01}}"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?href={{HREFSE02}}","event":[{"listen":"test","script":{"id":"cc7ade6e-cafa-4baa-8b09-602f1ae92979","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?href={{HREFSE02}}","host":["{{Service_Inventory}}service"],"query":[{"key":"href","value":"{{HREFSE02}}"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?fields=id","event":[{"listen":"test","script":{"id":"ca64bbfe-040b-47f9-8850-86146b297bb5","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?fields=id","host":["{{Service_Inventory}}service"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?id={{IDSE01}}","event":[{"listen":"test","script":{"id":"59839aa1-11e6-4988-8396-0164eba0086a","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceSpecification', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE01\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE01');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE01\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE01');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE01\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE01');});","            pm.test('state is ' + pm.globals.get(\"STATESE01\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE01');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE01\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE01');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE01\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE01');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE01\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE01');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE01\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE01');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE01\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE01');});","            pm.test('place is ' + pm.globals.get(\"PLACESE01\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE01');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE01\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE01');});","            pm.test('note is ' + pm.globals.get(\"NOTESE01\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE01');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE01\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE01');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE01\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE01');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE01\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE01');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE01\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE01');});","            pm.test('name is ' + pm.globals.get(\"NAMESE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE01');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE01\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE01');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE01\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE01');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE01\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE01');});","            pm.test('href is ' + pm.globals.get(\"HREFSE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE01');});","            pm.test('id is ' + pm.globals.get(\"IDSE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE01');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE01\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE01');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE01\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE01');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE01\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE01');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE01\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE01');});","        }","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('IDSE02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?id={{IDSE01}}","host":["{{Service_Inventory}}service"],"query":[{"key":"id","value":"{{IDSE01}}"}]},"description":"This operation filter a Service"},"response":[]},{"name":"/Service?id={{IDSE02}}","event":[{"listen":"test","script":{"id":"f254df85-77f9-4771-837d-5aa1f7835bf0","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['state', 'serviceSpecification', 'serviceDate', 'href', 'id'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has serviceDate attribute', function() { pm.expect(instance[\"serviceDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on state', function () {","            pm.expect(pm.response.text()).to.include(instance['state']);","        });","        pm.test('Body includes value held on serviceSpecification', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceSpecification']);","        });","        pm.test('Body includes value held on serviceDate', function () {","            pm.expect(pm.response.text()).to.include(instance['serviceDate']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDSE02\")) {","            pm.test('supportingService is ' + pm.globals.get(\"SUPPORTINGSERVICESE02\"), function() {pm.expect(instance['supportingService']) == pm.globals.get('SUPPORTINGSERVICESE02');});","            pm.test('feature is ' + pm.globals.get(\"FEATURESE02\"), function() {pm.expect(instance['feature']) == pm.globals.get('FEATURESE02');});","            pm.test('serviceRelationship is ' + pm.globals.get(\"SERVICERELATIONSHIPSE02\"), function() {pm.expect(instance['serviceRelationship']) == pm.globals.get('SERVICERELATIONSHIPSE02');});","            pm.test('state is ' + pm.globals.get(\"STATESE02\"), function() {pm.expect(instance['state']) == pm.globals.get('STATESE02');});","            pm.test('relatedEntity is ' + pm.globals.get(\"RELATEDENTITYSE02\"), function() {pm.expect(instance['relatedEntity']) == pm.globals.get('RELATEDENTITYSE02');});","            pm.test('startMode is ' + pm.globals.get(\"STARTMODESE02\"), function() {pm.expect(instance['startMode']) == pm.globals.get('STARTMODESE02');});","            pm.test('startDate is ' + pm.globals.get(\"STARTDATESE02\"), function() {pm.expect(instance['startDate']) == pm.globals.get('STARTDATESE02');});","            pm.test('isBundle is ' + pm.globals.get(\"ISBUNDLESE02\"), function() {pm.expect(instance['isBundle']) == pm.globals.get('ISBUNDLESE02');});","            pm.test('serviceOrderItem is ' + pm.globals.get(\"SERVICEORDERITEMSE02\"), function() {pm.expect(instance['serviceOrderItem']) == pm.globals.get('SERVICEORDERITEMSE02');});","            pm.test('place is ' + pm.globals.get(\"PLACESE02\"), function() {pm.expect(instance['place']) == pm.globals.get('PLACESE02');});","            pm.test('serviceCharacteristic is ' + pm.globals.get(\"SERVICECHARACTERISTICSE02\"), function() {pm.expect(instance['serviceCharacteristic']) == pm.globals.get('SERVICECHARACTERISTICSE02');});","            pm.test('note is ' + pm.globals.get(\"NOTESE02\"), function() {pm.expect(instance['note']) == pm.globals.get('NOTESE02');});","            pm.test('serviceType is ' + pm.globals.get(\"SERVICETYPESE02\"), function() {pm.expect(instance['serviceType']) == pm.globals.get('SERVICETYPESE02');});","            pm.test('supportingResource is ' + pm.globals.get(\"SUPPORTINGRESOURCESE02\"), function() {pm.expect(instance['supportingResource']) == pm.globals.get('SUPPORTINGRESOURCESE02');});","            pm.test('hasStarted is ' + pm.globals.get(\"HASSTARTEDSE02\"), function() {pm.expect(instance['hasStarted']) == pm.globals.get('HASSTARTEDSE02');});","            pm.test('serviceSpecification is ' + pm.globals.get(\"SERVICESPECIFICATIONSE02\"), function() {pm.expect(instance['serviceSpecification']) == pm.globals.get('SERVICESPECIFICATIONSE02');});","            pm.test('name is ' + pm.globals.get(\"NAMESE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESE02');});","            pm.test('description is ' + pm.globals.get(\"DESCRIPTIONSE02\"), function() {pm.expect(instance['description']) == pm.globals.get('DESCRIPTIONSE02');});","            pm.test('serviceDate is ' + pm.globals.get(\"SERVICEDATESE02\"), function() {pm.expect(instance['serviceDate']) == pm.globals.get('SERVICEDATESE02');});","            pm.test('endDate is ' + pm.globals.get(\"ENDDATESE02\"), function() {pm.expect(instance['endDate']) == pm.globals.get('ENDDATESE02');});","            pm.test('href is ' + pm.globals.get(\"HREFSE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSE02');});","            pm.test('id is ' + pm.globals.get(\"IDSE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSE02');});","            pm.test('relatedParty is ' + pm.globals.get(\"RELATEDPARTYSE02\"), function() {pm.expect(instance['relatedParty']) == pm.globals.get('RELATEDPARTYSE02');});","            pm.test('isServiceEnabled is ' + pm.globals.get(\"ISSERVICEENABLEDSE02\"), function() {pm.expect(instance['isServiceEnabled']) == pm.globals.get('ISSERVICEENABLEDSE02');});","            pm.test('isStateful is ' + pm.globals.get(\"ISSTATEFULSE02\"), function() {pm.expect(instance['isStateful']) == pm.globals.get('ISSTATEFULSE02');});","            pm.test('category is ' + pm.globals.get(\"CATEGORYSE02\"), function() {pm.expect(instance['category']) == pm.globals.get('CATEGORYSE02');});","        }","        if (instance.id == pm.globals.get(\"IDSE01\")) {","            pm.test('IDSE01 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service?id={{IDSE02}}","host":["{{Service_Inventory}}service"],"query":[{"key":"id","value":"{{IDSE02}}"}]},"description":"This operation filter a Service"},"response":[]}],"protocolProfileBehavior":{}},{"name":"E1","item":[{"name":"/Service/404ID","event":[{"listen":"test","script":{"id":"5ac44b22-8da1-4821-9d54-6913eb142427","exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"},{"key":"Authorization","value":"Bearer 1321321"}],"url":{"raw":"{{Service_Inventory}}service/141cf386-5831-41a9-84a0-648020b34b03","host":["{{Service_Inventory}}service"],"path":["141cf386-5831-41a9-84a0-648020b34b03"]},"description":"This operation search for one of the created Service"},"response":[]}],"protocolProfileBehavior":{}}],"protocolProfileBehavior":{}}