{"info":{"_postman_id":"de32e240-c720-4051-9d72-a8011b4f5174","name":"CTK-Geographic_Address-4.0.1","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"N1","item":[{"name":"/GeographicAddress","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","","pm.test(\"Status code is 200\", function () {","  pm.response.to.have.status(200);","});","","","","var instance = pm.response.json();","instance = instance[0]","var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","","pm.globals.set('CITYGA01', instance['city']);","pm.globals.set('COUNTRYGA01', instance['country']);","pm.globals.set('HREFGA01', instance['href']);","pm.globals.set('IDGA01', instance['id']);","pm.globals.set('POSTCODEGA01', instance['postcode']);","pm.globals.set('STATEORPROVINCEGA01', instance['stateOrProvince']);","pm.globals.set('STREETNAMEGA01', instance['streetName']);","pm.globals.set('STREETNRGA01', instance['streetNr']);","pm.globals.set('STREETTYPEGA01', instance['streetType']);","","pm.test('Body includes value held on city', function () {","  pm.expect(pm.response.text()).to.include(instance['city']);","});","pm.test('Body includes value held on country', function () {","  pm.expect(pm.response.text()).to.include(instance['country']);","});","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on postcode', function () {","  pm.expect(pm.response.text()).to.include(instance['postcode']);","});","pm.test('Body includes value held on stateOrProvince', function () {","  pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","});","pm.test('Body includes value held on streetName', function () {","  pm.expect(pm.response.text()).to.include(instance['streetName']);","});","pm.test('Body includes value held on streetNr', function () {","  pm.expect(pm.response.text()).to.include(instance['streetNr']);","});","pm.test('Body includes value held on streetType', function () {","  pm.expect(pm.response.text()).to.include(instance['streetType']);","});",""],"type":"text/javascript"}}],"protocolProfileBehavior":{"disableBodyPruning":true},"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"{{Geographic_Address}}geographicAddress","host":["{{Geographic_Address}}geographicAddress"]},"description":"This operation retrieves a GeographicAddress"},"response":[]}]},{"name":"N2","item":[{"name":"/GeographicAddress?fields=city","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'city'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=city","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"city"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?city={{CITYGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?city={{CITYGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"city","value":"{{CITYGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?fields=country","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'country'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=country","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"country"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?country={{COUNTRYGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?country={{COUNTRYGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"country","value":"{{COUNTRYGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=id","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?id={{IDGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?id={{IDGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"id","value":"{{IDGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?fields=postcode","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'postcode'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=postcode","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"postcode"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?postcode={{POSTCODEGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?postcode={{POSTCODEGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"postcode","value":"{{POSTCODEGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?fields=stateOrProvince","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'stateOrProvince'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'stateOrProvince'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=stateOrProvince","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"stateOrProvince"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?stateOrProvince={{STATEORPROVINCEGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?stateOrProvince={{STATEORPROVINCEGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"stateOrProvince","value":"{{STATEORPROVINCEGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?fields=streetName","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'streetName'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=streetName","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"streetName"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?streetName={{STREETNAMEGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?streetName={{STREETNAMEGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"streetName","value":"{{STREETNAMEGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?fields=streetNr","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'streetNr'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=streetNr","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"streetNr"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?streetNr={{STREETNRGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?streetNr={{STREETNRGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"streetNr","value":"{{STREETNRGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?fields=streetType","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'streetType'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?fields=streetType","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"fields","value":"streetType"}]},"description":"This operation filter a GeographicAddress"},"response":[]},{"name":"/GeographicAddress?streetType={{STREETTYPEGA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['city', 'country', 'geographicSubAddress', 'href', 'id', 'postcode', 'stateOrProvince', 'streetName', 'streetNr', 'streetType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has city attribute', function() { pm.expect(instance[\"city\"]).to.be.a('string'); });","        pm.test('Response has country attribute', function() { pm.expect(instance[\"country\"]).to.be.a('string'); });","        pm.test('Response has geographicSubAddress attribute', function() { pm.expect(instance[\"geographicSubAddress\"]).to.be.a('array'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has postcode attribute', function() { pm.expect(instance[\"postcode\"]).to.be.a('string'); });","        pm.test('Response has stateOrProvince attribute', function() { pm.expect(instance[\"stateOrProvince\"]).to.be.a('string'); });","        pm.test('Response has streetName attribute', function() { pm.expect(instance[\"streetName\"]).to.be.a('string'); });","        pm.test('Response has streetNr attribute', function() { pm.expect(instance[\"streetNr\"]).to.be.a('string'); });","        pm.test('Response has streetType attribute', function() { pm.expect(instance[\"streetType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on city', function () {","            pm.expect(pm.response.text()).to.include(instance['city']);","        });","        pm.test('Body includes value held on country', function () {","            pm.expect(pm.response.text()).to.include(instance['country']);","        });","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on postcode', function () {","            pm.expect(pm.response.text()).to.include(instance['postcode']);","        });","        pm.test('Body includes value held on stateOrProvince', function () {","            pm.expect(pm.response.text()).to.include(instance['stateOrProvince']);","        });","        pm.test('Body includes value held on streetName', function () {","            pm.expect(pm.response.text()).to.include(instance['streetName']);","        });","        pm.test('Body includes value held on streetNr', function () {","            pm.expect(pm.response.text()).to.include(instance['streetNr']);","        });","        pm.test('Body includes value held on streetType', function () {","            pm.expect(pm.response.text()).to.include(instance['streetType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGA01\")) {","            pm.test('city is ' + pm.globals.get(\"CITYGA01\"), function() {pm.expect(instance['city']) == pm.globals.get('CITYGA01');});","            pm.test('country is ' + pm.globals.get(\"COUNTRYGA01\"), function() {pm.expect(instance['country']) == pm.globals.get('COUNTRYGA01');});","            pm.test('href is ' + pm.globals.get(\"HREFGA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGA01');});","            pm.test('id is ' + pm.globals.get(\"IDGA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGA01');});","            pm.test('postcode is ' + pm.globals.get(\"POSTCODEGA01\"), function() {pm.expect(instance['postcode']) == pm.globals.get('POSTCODEGA01');});","            pm.test('stateOrProvince is ' + pm.globals.get(\"STATEORPROVINCEGA01\"), function() {pm.expect(instance['stateOrProvince']) == pm.globals.get('STATEORPROVINCEGA01');});","            pm.test('streetName is ' + pm.globals.get(\"STREETNAMEGA01\"), function() {pm.expect(instance['streetName']) == pm.globals.get('STREETNAMEGA01');});","            pm.test('streetNr is ' + pm.globals.get(\"STREETNRGA01\"), function() {pm.expect(instance['streetNr']) == pm.globals.get('STREETNRGA01');});","            pm.test('streetType is ' + pm.globals.get(\"STREETTYPEGA01\"), function() {pm.expect(instance['streetType']) == pm.globals.get('STREETTYPEGA01');});","        }","        if (instance.id == pm.globals.get(\"IDGA02\")) {","            pm.test('IDGA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress?streetType={{STREETTYPEGA01}}","host":["{{Geographic_Address}}geographicAddress"],"query":[{"key":"streetType","value":"{{STREETTYPEGA01}}"}]},"description":"This operation filter a GeographicAddress"},"response":[]}]},{"name":"E1","item":[{"name":"/GeographicAddress/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/18f16334-c5fb-4082-a2b6-cd385f3f5361","host":["{{Geographic_Address}}geographicAddress"],"path":["18f16334-c5fb-4082-a2b6-cd385f3f5361"]},"description":"This operation search for one of the created GeographicAddress"},"response":[]}]},{"name":"N1","item":[{"name":"/GeographicSubAddress","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","","pm.test(\"Status code is 200\", function () {","  pm.response.to.have.status(200);","});","","","var instance = jsonData[0]","var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","","pm.globals.set('HREFGSA01', instance['href']);","pm.globals.set('IDGSA01', instance['id']);","pm.globals.set('LEVELNUMBERGSA01', instance['levelNumber']);","pm.globals.set('LEVELTYPEGSA01', instance['levelType']);","pm.globals.set('PRIVATESTREETNAMEGSA01', instance['privateStreetName']);","pm.globals.set('PRIVATESTREETNUMBERGSA01', instance['privateStreetNumber']);","pm.globals.set('SUBADDRESSTYPEGSA01', instance['subAddressType']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on levelNumber', function () {","  pm.expect(pm.response.text()).to.include(instance['levelNumber']);","});","pm.test('Body includes value held on levelType', function () {","  pm.expect(pm.response.text()).to.include(instance['levelType']);","});","pm.test('Body includes value held on privateStreetName', function () {","  pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","});","pm.test('Body includes value held on privateStreetNumber', function () {","  pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","});","pm.test('Body includes value held on subAddressType', function () {","  pm.expect(pm.response.text()).to.include(instance['subAddressType']);","});",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"]},"description":"This operation retrieves a GeographicSubAddress"},"response":[]}]},{"name":"N2","item":[{"name":"/GeographicSubAddress?fields=href","event":[{"listen":"test","script":{"exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?fields=href","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"fields","value":"href"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?href={{HREFGSA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?href={{HREFGSA01}}","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"href","value":"{{HREFGSA01}}"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?fields=id","event":[{"listen":"test","script":{"exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?fields=id","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?id={{IDGSA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?id={{IDGSA01}}","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"id","value":"{{IDGSA01}}"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?fields=levelNumber","event":[{"listen":"test","script":{"exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?fields=levelNumber","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"fields","value":"levelNumber"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?levelNumber={{LEVELNUMBERGSA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?levelNumber={{LEVELNUMBERGSA01}}","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"levelNumber","value":"{{LEVELNUMBERGSA01}}"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?fields=levelType","event":[{"listen":"test","script":{"exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?fields=levelType","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"fields","value":"levelType"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?levelType={{LEVELTYPEGSA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?levelType={{LEVELTYPEGSA01}}","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"levelType","value":"{{LEVELTYPEGSA01}}"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?fields=privateStreetName","event":[{"listen":"test","script":{"exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?fields=privateStreetName","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"fields","value":"privateStreetName"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?privateStreetName={{PRIVATESTREETNAMEGSA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?privateStreetName={{PRIVATESTREETNAMEGSA01}}","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"privateStreetName","value":"{{PRIVATESTREETNAMEGSA01}}"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?fields=privateStreetNumber","event":[{"listen":"test","script":{"exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?fields=privateStreetNumber","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"fields","value":"privateStreetNumber"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?privateStreetNumber={{PRIVATESTREETNUMBERGSA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?privateStreetNumber={{PRIVATESTREETNUMBERGSA01}}","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"privateStreetNumber","value":"{{PRIVATESTREETNUMBERGSA01}}"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?fields=subAddressType","event":[{"listen":"test","script":{"exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?fields=subAddressType","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"fields","value":"subAddressType"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]},{"name":"/GeographicSubAddress?subAddressType={{SUBADDRESSTYPEGSA01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'levelNumber', 'levelType', 'privateStreetName', 'privateStreetNumber', 'subAddressType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has levelNumber attribute', function() { pm.expect(instance[\"levelNumber\"]).to.be.a('string'); });","        pm.test('Response has levelType attribute', function() { pm.expect(instance[\"levelType\"]).to.be.a('string'); });","        pm.test('Response has privateStreetName attribute', function() { pm.expect(instance[\"privateStreetName\"]).to.be.a('string'); });","        pm.test('Response has privateStreetNumber attribute', function() { pm.expect(instance[\"privateStreetNumber\"]).to.be.a('string'); });","        pm.test('Response has subAddressType attribute', function() { pm.expect(instance[\"subAddressType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on levelNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['levelNumber']);","        });","        pm.test('Body includes value held on levelType', function () {","            pm.expect(pm.response.text()).to.include(instance['levelType']);","        });","        pm.test('Body includes value held on privateStreetName', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetName']);","        });","        pm.test('Body includes value held on privateStreetNumber', function () {","            pm.expect(pm.response.text()).to.include(instance['privateStreetNumber']);","        });","        pm.test('Body includes value held on subAddressType', function () {","            pm.expect(pm.response.text()).to.include(instance['subAddressType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGSA01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGSA01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGSA01');});","            pm.test('id is ' + pm.globals.get(\"IDGSA01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGSA01');});","            pm.test('levelNumber is ' + pm.globals.get(\"LEVELNUMBERGSA01\"), function() {pm.expect(instance['levelNumber']) == pm.globals.get('LEVELNUMBERGSA01');});","            pm.test('levelType is ' + pm.globals.get(\"LEVELTYPEGSA01\"), function() {pm.expect(instance['levelType']) == pm.globals.get('LEVELTYPEGSA01');});","            pm.test('privateStreetName is ' + pm.globals.get(\"PRIVATESTREETNAMEGSA01\"), function() {pm.expect(instance['privateStreetName']) == pm.globals.get('PRIVATESTREETNAMEGSA01');});","            pm.test('privateStreetNumber is ' + pm.globals.get(\"PRIVATESTREETNUMBERGSA01\"), function() {pm.expect(instance['privateStreetNumber']) == pm.globals.get('PRIVATESTREETNUMBERGSA01');});","            pm.test('subAddressType is ' + pm.globals.get(\"SUBADDRESSTYPEGSA01\"), function() {pm.expect(instance['subAddressType']) == pm.globals.get('SUBADDRESSTYPEGSA01');});","        }","        if (instance.id == pm.globals.get(\"IDGSA02\")) {","            pm.test('IDGSA02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddress/{{IDGA01}}/geographicSubAddress?subAddressType={{SUBADDRESSTYPEGSA01}}","host":["{{Geographic_Address}}geographicAddress"],"path":["{{IDGA01}}","geographicSubAddress"],"query":[{"key":"subAddressType","value":"{{SUBADDRESSTYPEGSA01}}"}]},"description":"This operation filter a GeographicSubAddress"},"response":[]}]},{"name":"E1","item":[{"name":"/GeographicSubAddress/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}GeographicSubAddress/1a6c95b0-fce6-47db-867a-86043b467ef3","host":["{{Geographic_Address}}GeographicSubAddress"],"path":["1a6c95b0-fce6-47db-867a-86043b467ef3"]},"description":"This operation search for one of the created GeographicSubAddress"},"response":[]}]},{"name":"N1","item":[{"name":"/GeographicAddressValidation","event":[{"listen":"test","script":{"exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","","pm.globals.set('HREFGAV01', instance['href']);","pm.globals.set('IDGAV01', instance['id']);","pm.globals.set('PROVIDEALTERNATIVEGAV01', instance['provideAlternative']);","pm.globals.set('VALIDATIONDATEGAV01', instance['validationDate']);","pm.globals.set('VALIDATIONRESULTGAV01', instance['validationResult']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on provideAlternative', function () {","  pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","});","pm.test('Body includes value held on validationDate', function () {","  pm.expect(pm.response.text()).to.include(instance['validationDate']);","});","pm.test('Body includes value held on validationResult', function () {","  pm.expect(pm.response.text()).to.include(instance['validationResult']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"provideAlternative\": true,\n  \"submittedGeographicAddress\": {}\n}"},"url":{"raw":"{{Geographic_Address}}geographicAddressValidation","host":["{{Geographic_Address}}geographicAddressValidation"]},"description":"This operation creates another GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV02');});","            pm.test('id is ' + pm.globals.get(\"IDGAV02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV02');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV02\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV02');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV02\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV02');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV02\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV02');});","            pm.test('id is ' + pm.globals.get(\"IDGAV02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV02');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV02\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV02');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV02\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV02');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV02\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation","host":["{{Geographic_Address}}geographicAddressValidation"]},"description":"This operation search for the created GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation/{{IDGAV01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation/{{IDGAV01}}","host":["{{Geographic_Address}}geographicAddressValidation"],"path":["{{IDGAV01}}"]},"description":"This operation search for one of the created GeographicAddressValidation"},"response":[]}]},{"name":"N2","item":[{"name":"/GeographicAddressValidation?fields=id","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'id'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?fields=id","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation?id={{IDGAV01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?id={{IDGAV01}}","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"id","value":"{{IDGAV01}}"}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation?fields=provideAlternative","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'provideAlternative'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?fields=provideAlternative","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"fields","value":"provideAlternative"}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation?provideAlternative={{PROVIDEALTERNATIVEGAV01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?provideAlternative={{PROVIDEALTERNATIVEGAV01}}","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"provideAlternative","value":"{{PROVIDEALTERNATIVEGAV01}}"}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation?fields=validationDate","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'validationDate'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?fields=validationDate","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"fields","value":"validationDate"}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation?validationDate={{VALIDATIONDATEGAV01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?validationDate=\"{{VALIDATIONDATEGAV01}}\"","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"validationDate","value":"\"{{VALIDATIONDATEGAV01}}\""},{"key":"validationDate","value":"\"2021-02-19T16:42:46.562Z\"","disabled":true}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation?fields=validationResult","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['id','href', 'validationResult'];","      ","        pm.test('Instance must have id, href and filtered attribute', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes)});","        pm.test('Instance has only id, href and filtered attribute', function () { pm.expect(requiredAttributes).to.include.members(Object.keys(instance))});","    });","","    ","}","else { ","  ","    pm.test('Array expected as response', function (){pm.expect.fail()});","  ","","}"],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?fields=validationResult","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"fields","value":"validationResult"}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]},{"name":"/GeographicAddressValidation?validationResult={{VALIDATIONRESULTGAV01}}","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['href', 'id', 'provideAlternative', 'state', 'submittedGeographicAddress', 'validGeographicAddress', 'validationDate', 'validationResult'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has provideAlternative attribute', function() { pm.expect(instance[\"provideAlternative\"]).to.be.a('boolean'); });","        pm.test('Response has validationDate attribute', function() { pm.expect(instance[\"validationDate\"]).to.be.a('string'); });","        pm.test('Response has validationResult attribute', function() { pm.expect(instance[\"validationResult\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on provideAlternative', function () {","            pm.expect(pm.response.text()).to.include(instance['provideAlternative']);","        });","        pm.test('Body includes value held on validationDate', function () {","            pm.expect(pm.response.text()).to.include(instance['validationDate']);","        });","        pm.test('Body includes value held on validationResult', function () {","            pm.expect(pm.response.text()).to.include(instance['validationResult']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDGAV01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFGAV01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFGAV01');});","            pm.test('id is ' + pm.globals.get(\"IDGAV01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDGAV01');});","            pm.test('provideAlternative is ' + pm.globals.get(\"PROVIDEALTERNATIVEGAV01\"), function() {pm.expect(instance['provideAlternative']) == pm.globals.get('PROVIDEALTERNATIVEGAV01');});","            pm.test('validationDate is ' + pm.globals.get(\"VALIDATIONDATEGAV01\"), function() {pm.expect(instance['validationDate']) == pm.globals.get('VALIDATIONDATEGAV01');});","            pm.test('validationResult is ' + pm.globals.get(\"VALIDATIONRESULTGAV01\"), function() {pm.expect(instance['validationResult']) == pm.globals.get('VALIDATIONRESULTGAV01');});","        }","        if (instance.id == pm.globals.get(\"IDGAV02\")) {","            pm.test('IDGAV02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation?validationResult={{VALIDATIONRESULTGAV01}}","host":["{{Geographic_Address}}geographicAddressValidation"],"query":[{"key":"validationResult","value":"{{VALIDATIONRESULTGAV01}}"}]},"description":"This operation filter a GeographicAddressValidation"},"response":[]}]},{"name":"E1","item":[{"name":"/GeographicAddressValidation/404ID","event":[{"listen":"test","script":{"exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{Geographic_Address}}geographicAddressValidation/84cc1b8f-0149-4f1a-8d33-e601c1f77522","host":["{{Geographic_Address}}geographicAddressValidation"],"path":["84cc1b8f-0149-4f1a-8d33-e601c1f77522"]},"description":"This operation search for one of the created GeographicAddressValidation"},"response":[]}]}]}