{
  "collection": {
    "_": {
      "postman_id": "63501e8b-0f6b-4ec7-946d-fc373684abde"
    },
    "item": [
      {
        "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
        "name": "N1",
        "item": [
          {
            "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
            "name": "/ServiceOrder",
            "request": {
              "description": {
                "content": "This operation creates a ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                  "type": "text/javascript",
                  "exec": [
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData)) { ",
                    "  ",
                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                    "  ",
                    "",
                    "}",
                    "",
                    "pm.test(\"Status code is 201\", function () {",
                    "  pm.response.to.have.status(201);",
                    "});",
                    "",
                    "var instance = pm.response.json();",
                    "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "",
                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "",
                    "pm.globals.set('HREFSO01', instance['href']);",
                    "pm.globals.set('IDSO01', instance['id']);",
                    "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                    "",
                    "pm.test('Body includes value held on href', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                    "});",
                    "pm.test('Body includes value held on id', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                    "});",
                    "pm.test('Body includes value held on orderDate', function () {",
                    "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                }
              }
            ]
          },
          {
            "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
            "name": "/ServiceOrder",
            "request": {
              "description": {
                "content": "This operation search for the created ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                  "type": "text/javascript",
                  "exec": [
                    "var Ajv = require('ajv');",
                    "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                    "    ServiceOrder_Schema = {",
                    "    \"$schema\": \"http://json-schema.org/schema#\",",
                    "    \"type\": \"object\",",
                    "    \"properties\": {",
                    "        \"serviceOrderItem\": {",
                    "            \"type\": \"array\",",
                    "            \"items\": {",
                    "                \"type\": \"object\",",
                    "                \"properties\": {",
                    "                    \"id\": {",
                    "                        \"type\": \"string\"",
                    "                    },",
                    "                    \"action\": {",
                    "                        \"type\": \"string\"",
                    "                    },",
                    "                    \"@type\": {",
                    "                        \"type\": \"string\"",
                    "                    },",
                    "                    \"service\": {",
                    "                        \"anyOf\": [{",
                    "                            \"type\": \"object\",",
                    "                            \"properties\": {",
                    "                                \"serviceSpecification\": {",
                    "                                    \"type\": \"object\",",
                    "                                    \"properties\": {",
                    "                                        \"id\": {",
                    "                                            \"type\": \"string\"",
                    "                                        }",
                    "                                    },",
                    "                                    \"required\": [\"id\"]",
                    "                                },",
                    "                                \"state\": {",
                    "                                    \"type\": \"string\"",
                    "                                },",
                    "                                \"serviceType\": {",
                    "                                    \"type\": \"string\"",
                    "                                }",
                    "                            },",
                    "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                    "                        }, {",
                    "                            \"type\": \"object\",",
                    "                            \"properties\": {",
                    "                                \"id\": {",
                    "                                    \"type\": \"string\"",
                    "                                },",
                    "                                \"state\": {",
                    "                                    \"type\": \"string\"",
                    "                                },",
                    "                                \"serviceType\": {",
                    "                                    \"type\": \"string\"",
                    "                                }",
                    "                            },",
                    "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                    "                        }]",
                    "                    }",
                    "                },",
                    "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                    "            }",
                    "        }",
                    "    },",
                    "    \"required\": [\"serviceOrderItem\"]",
                    "};",
                    "",
                    "",
                    "",
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "",
                    "",
                    "var jsonData = pm.response.json();",
                    "",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "        ",
                    "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                    "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                    "            pm.expect(valid).to.eql(true);",
                    "        });",
                    "        console.log(ajv.errorsText());",
                    "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on orderDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                    "        }",
                    "",
                    "",
                    "    });",
                    "}",
                    "else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "",
                    "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "",
                    "",
                    "",
                    "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "",
                    "    pm.test('Body includes value held on href', function () {",
                    "        pm.expect(pm.response.text()).to.include(instance['href']);",
                    "    });",
                    "    pm.test('Body includes value held on id', function () {",
                    "        pm.expect(pm.response.text()).to.include(instance['id']);",
                    "    });",
                    "    pm.test('Body includes value held on orderDate', function () {",
                    "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "    });",
                    "    // Individualized tests",
                    "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                    "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                    "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                    "    }",
                    "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                    "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                    "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                    "    }",
                    "",
                    "}",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                }
              }
            ]
          },
          {
            "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
            "name": "/ServiceOrder/{{IDSO01}}",
            "request": {
              "description": {
                "content": "This operation search for one of the created ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "{{IDSO01}}"
                ],
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on orderDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "            pm.test('IDSO02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on orderDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "            pm.test('IDSO02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
        "name": "N2",
        "item": [
          {
            "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
            "name": "/ServiceOrder?fields=href",
            "request": {
              "description": {
                "content": "This operation filter a ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "href"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                }
              }
            ]
          },
          {
            "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
            "name": "/ServiceOrder?fields=id",
            "request": {
              "description": {
                "content": "This operation filter a ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "id"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                }
              }
            ]
          },
          {
            "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
            "name": "/ServiceOrder?id={{IDSO01}}",
            "request": {
              "description": {
                "content": "This operation filter a ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{IDSO01}}"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on orderDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "            pm.test('IDSO02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on orderDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "            pm.test('IDSO02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                }
              }
            ]
          },
          {
            "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
            "name": "/ServiceOrder?fields=orderDate",
            "request": {
              "description": {
                "content": "This operation filter a ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [
                  {
                    "key": "fields",
                    "value": "orderDate"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                }
              }
            ]
          },
          {
            "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
            "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
            "request": {
              "description": {
                "content": "This operation filter a ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [
                  {
                    "key": "orderDate",
                    "value": "\"{{ORDERDATESO01}}\""
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "  ",
                    "  ",
                    "  ",
                    "var jsonData = pm.response.json();",
                    "  ",
                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                    "    jsonData.forEach(function (instance, index) {",
                    "      ",
                    "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on orderDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "            pm.test('IDSO02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "          ",
                    "    });",
                    "  }",
                    "  else {",
                    "    var instance = pm.response.json();",
                    "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                    "      ",
                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                    "      ",
                    "      ",
                    "      ",
                    "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                    "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                    "      ",
                    "        pm.test('Body includes value held on href', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                    "        });",
                    "        pm.test('Body includes value held on id', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                    "        });",
                    "        pm.test('Body includes value held on orderDate', function () {",
                    "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                    "        });",
                    "        // Individualized tests",
                    "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                    "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                    "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                    "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                    "        }",
                    "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                    "            pm.test('IDSO02 not expected on this test', function () {",
                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                    "            });",
                    "        }",
                    "",
                    "        ",
                    "   ",
                    "}",
                    "  ",
                    "  "
                  ],
                  "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "id": "5a2cd552-b292-49aa-a44a-9b55d2bb43d7",
        "name": "E1",
        "item": [
          {
            "id": "2beb6f02-ec5a-4786-b399-19d2870e325a",
            "name": "/ServiceOrder/404ID",
            "request": {
              "description": {
                "content": "This operation search for one of the created ServiceOrder",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "8c4cfbc4-2280-4d07-a44f-3a8aaf2849c9"
                ],
                "host": [
                  "{{Service_Ordering}}serviceOrder"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                },
                {
                  "key": "X-Group-ID",
                  "value": "test"
                },
                {
                  "key": "X-Correlation-ID",
                  "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52beba39-fb64-4e9e-8e8f-32ee956ba3ec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    ""
                  ],
                  "_lastExecutionId": "b7e2982e-1699-4313-836b-2b251b3a2218"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "63501e8b-0f6b-4ec7-946d-fc373684abde",
      "name": "CTK-Service_Ordering-4.0.0",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2020-07-07T14:17:10.805Z",
      "postman_exported_using": "Postman/7.27.1"
    },
    "id": "da32588a-3916-4d78-a546-7623e391f650",
    "name": "TMForumv4",
    "values": [
      {
        "type": "any",
        "value": "{{Service_Inventory}}/tmf-api/serviceInventory/v4",
        "key": "ServiceInventoryAPI"
      },
      {
        "type": "any",
        "value": "http://localhost:8082/serviceOrdering/v4/serviceOrder/Eline",
        "key": "Service_Ordering"
      },
      {
        "type": "any",
        "value": "https://api-service-qualification-management-v4-0-0.mybluemix.net",
        "key": "Service_Qualification"
      },
      {
        "type": "any",
        "value": "https://api-service-test-management-v4-0-0.mybluemix.net",
        "key": "Service_Test"
      },
      {
        "type": "any",
        "value": "https://api-usage-consumption-v4-0-0.mybluemix.net",
        "key": "Usage_Consumption"
      },
      {
        "type": "any",
        "value": "https://api-service-activation-and-configuration-v4-0-0.mybluemix.net",
        "key": "Service_Activation"
      },
      {
        "type": "any",
        "value": "https://api-service-catalog-management-v4-0-0.mybluemix.net",
        "key": "Service_Catalog"
      },
      {
        "type": "any",
        "value": "https://api-service-problem-management-v4-0-0.mybluemix.net",
        "key": "Service_Problem"
      },
      {
        "type": "any",
        "value": "https://api-service-inventory-management-v4-0-0.mybluemix.net",
        "key": "Service_Inventory"
      },
      {
        "type": "any",
        "value": "{{Service_Catalog}}/tmf-api/serviceCatalogManagement/v4",
        "key": "ServiceCatalogAPI"
      },
      {
        "type": "any",
        "value": "eff330b1-2ae8-4b22-b554-aa94afb8acbe",
        "key": "id"
      },
      {
        "type": "any",
        "value": "0",
        "key": "offset"
      },
      {
        "type": "any",
        "value": "5",
        "key": "limit"
      },
      {
        "type": "any",
        "value": "http://127.0.0.1:8080",
        "key": "localhost"
      },
      {
        "type": "any",
        "value": "0",
        "key": "delay"
      }
    ]
  },
  "globals": {
    "id": "34db5695-c1c0-4ddd-b67c-0e3093a719da",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 9,
        "pending": 0,
        "failed": 5
      },
      "prerequests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 9,
        "pending": 0,
        "failed": 9
      },
      "tests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 5,
        "pending": 0,
        "failed": 5
      },
      "testScripts": {
        "total": 9,
        "pending": 0,
        "failed": 5
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1629927790659,
      "completed": 1629927790868
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "785f3aad-d12b-46cf-85f5-97096e4f45a7",
          "httpRequestId": "68b29a85-2e3a-4b24-8245-d4a33bff94b5"
        },
        "item": {
          "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
          "name": "/ServiceOrder",
          "request": {
            "description": {
              "content": "This operation creates a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFSO01', instance['href']);",
                  "pm.globals.set('IDSO01', instance['id']);",
                  "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                  "",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on orderDate', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation creates a ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6e47c392-0eef-49d8-a47a-67b58585d082",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
          }
        },
        "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "087d18d9-6a86-4000-b06d-e0e58b993cd9",
              "timestamp": 1629927790711,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5f82b86d-e75d-4dab-8091-036e58e104b6",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0aadda5f-76d7-453e-b52c-adfc69c5fe98"
        },
        "item": {
          "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
          "name": "/ServiceOrder",
          "request": {
            "description": {
              "content": "This operation search for the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                "type": "text/javascript",
                "exec": [
                  "var Ajv = require('ajv');",
                  "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                  "    ServiceOrder_Schema = {",
                  "    \"$schema\": \"http://json-schema.org/schema#\",",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"serviceOrderItem\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"id\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"action\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"@type\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"service\": {",
                  "                        \"anyOf\": [{",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"serviceSpecification\": {",
                  "                                    \"type\": \"object\",",
                  "                                    \"properties\": {",
                  "                                        \"id\": {",
                  "                                            \"type\": \"string\"",
                  "                                        }",
                  "                                    },",
                  "                                    \"required\": [\"id\"]",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                  "                        }, {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"id\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                  "                        }]",
                  "                    }",
                  "                },",
                  "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"serviceOrderItem\"]",
                  "};",
                  "",
                  "",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "        ",
                  "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                  "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                  "            pm.expect(valid).to.eql(true);",
                  "        });",
                  "        console.log(ajv.errorsText());",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "        }",
                  "",
                  "",
                  "    });",
                  "}",
                  "else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "    pm.test('Body includes value held on href', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['href']);",
                  "    });",
                  "    pm.test('Body includes value held on id', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['id']);",
                  "    });",
                  "    pm.test('Body includes value held on orderDate', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "    });",
                  "    // Individualized tests",
                  "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "    }",
                  "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "    }",
                  "",
                  "}",
                  "",
                  ""
                ],
                "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for the created ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50df843d-8157-474a-be73-8d445d790fa7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "e7e75c9c-f8c6-4a19-94f5-b7e7e6cf9846",
              "timestamp": 1629927790742,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5353e0ef-bf22-49e3-9b97-44d42a436bcb",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e5bc69a-f1d0-4101-ba10-346e59e2c90c"
        },
        "item": {
          "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
          "name": "/ServiceOrder/{{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDSO01}}"
              ],
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder",
              "{{IDSO01}}"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3add9a06-2235-44b1-8bfd-1ac7da40c5d6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "ea4c3fe2-387b-4486-95d2-5ea3d0fbfa71",
              "timestamp": 1629927790758,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2cc22254-5bef-47b7-a50c-e566b14f2bcc",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3a5f667-4292-4dd5-83f1-dfccf7ca6bb2"
        },
        "item": {
          "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
          "name": "/ServiceOrder?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "href"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9822ddbf-1bac-45cd-a3f3-25ebc25071b7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        }
      },
      {
        "cursor": {
          "ref": "deaf6603-162c-460f-9540-e70aad30969a",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5abd806b-940e-48df-b59e-923e00d3cca1"
        },
        "item": {
          "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
          "name": "/ServiceOrder?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "id"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a627b2c3-e2fb-4047-84fb-f5d79c4225b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        }
      },
      {
        "cursor": {
          "ref": "e2181b97-fe05-4be6-9f2e-c4ba9d15ef6d",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6f8e9321-09f1-426b-9fef-636185d9c08a"
        },
        "item": {
          "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
          "name": "/ServiceOrder?id={{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDSO01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "{{IDSO01}}"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e8711a23-d39c-42ae-9da3-31e5820e11c0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "9d45c977-c922-49af-bc6c-a97620310f30",
              "timestamp": 1629927790819,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ff0a3aeb-2699-4e07-8c0b-22282508c6a5",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d6a165f2-6ea7-4acb-8ab0-fbad6a8d4350"
        },
        "item": {
          "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
          "name": "/ServiceOrder?fields=orderDate",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "orderDate"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "fields",
                "value": "orderDate"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "03c3d131-2fda-49be-8251-aaab0b691bf9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        }
      },
      {
        "cursor": {
          "ref": "9ddb90bf-77ed-4347-92d2-008d60971bc2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7e6b4ce6-609a-4e4b-adce-abbba18951f4"
        },
        "item": {
          "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
          "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "orderDate",
                  "value": "\"{{ORDERDATESO01}}\""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation filter a ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "orderDate",
                "value": "\"{{ORDERDATESO01}}\""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "662d310a-f5ff-40a6-be2f-52f2eeae85f7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "f4257c47-503b-4c5d-a2c7-9ec38366776a",
              "timestamp": 1629927790849,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f885a232-70cc-4f95-94be-60807bbdbcd1",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e099d019-395f-41b2-a239-533840954b0a"
        },
        "item": {
          "id": "2beb6f02-ec5a-4786-b399-19d2870e325a",
          "name": "/ServiceOrder/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "8c4cfbc4-2280-4d07-a44f-3a8aaf2849c9"
              ],
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52beba39-fb64-4e9e-8e8f-32ee956ba3ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "b7e2982e-1699-4313-836b-2b251b3a2218"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This operation search for one of the created ServiceOrder",
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "8082",
            "path": [
              "serviceOrdering",
              "v4",
              "serviceOrder",
              "ElineserviceOrder",
              "8c4cfbc4-2280-4d07-a44f-3a8aaf2849c9"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
            },
            {
              "key": "X-Group-ID",
              "value": "test"
            },
            {
              "key": "X-Correlation-ID",
              "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.24.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09bd08eb-5b12-4a3b-a516-867979ab479e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8082",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "2beb6f02-ec5a-4786-b399-19d2870e325a",
        "requestError": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082
        },
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "96d4b92e-50c9-417c-93f6-73367a6eacc4",
          "timestamp": 1629927790699,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
          "name": "/ServiceOrder",
          "request": {
            "description": {
              "content": "This operation creates a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFSO01', instance['href']);",
                  "pm.globals.set('IDSO01', instance['id']);",
                  "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                  "",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on orderDate', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "785f3aad-d12b-46cf-85f5-97096e4f45a7",
          "httpRequestId": "68b29a85-2e3a-4b24-8245-d4a33bff94b5"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "087d18d9-6a86-4000-b06d-e0e58b993cd9",
          "timestamp": 1629927790711,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
          "name": "/ServiceOrder",
          "request": {
            "description": {
              "content": "This operation creates a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData)) { ",
                  "  ",
                  "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                  "  ",
                  "",
                  "}",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "var instance = pm.response.json();",
                  "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "pm.globals.set('HREFSO01', instance['href']);",
                  "pm.globals.set('IDSO01', instance['id']);",
                  "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                  "",
                  "pm.test('Body includes value held on href', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['href']);",
                  "});",
                  "pm.test('Body includes value held on id', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['id']);",
                  "});",
                  "pm.test('Body includes value held on orderDate', function () {",
                  "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "785f3aad-d12b-46cf-85f5-97096e4f45a7",
          "httpRequestId": "68b29a85-2e3a-4b24-8245-d4a33bff94b5",
          "scriptId": "fd6173d6-637f-405b-a2ca-5236a6ea1218"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "64c34fd9-e156-4ee9-b87a-4a40b056c5d9",
          "timestamp": 1629927790724,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
          "name": "/ServiceOrder",
          "request": {
            "description": {
              "content": "This operation search for the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                "type": "text/javascript",
                "exec": [
                  "var Ajv = require('ajv');",
                  "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                  "    ServiceOrder_Schema = {",
                  "    \"$schema\": \"http://json-schema.org/schema#\",",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"serviceOrderItem\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"id\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"action\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"@type\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"service\": {",
                  "                        \"anyOf\": [{",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"serviceSpecification\": {",
                  "                                    \"type\": \"object\",",
                  "                                    \"properties\": {",
                  "                                        \"id\": {",
                  "                                            \"type\": \"string\"",
                  "                                        }",
                  "                                    },",
                  "                                    \"required\": [\"id\"]",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                  "                        }, {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"id\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                  "                        }]",
                  "                    }",
                  "                },",
                  "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"serviceOrderItem\"]",
                  "};",
                  "",
                  "",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "        ",
                  "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                  "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                  "            pm.expect(valid).to.eql(true);",
                  "        });",
                  "        console.log(ajv.errorsText());",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "        }",
                  "",
                  "",
                  "    });",
                  "}",
                  "else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "    pm.test('Body includes value held on href', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['href']);",
                  "    });",
                  "    pm.test('Body includes value held on id', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['id']);",
                  "    });",
                  "    pm.test('Body includes value held on orderDate', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "    });",
                  "    // Individualized tests",
                  "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "    }",
                  "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "    }",
                  "",
                  "}",
                  "",
                  ""
                ],
                "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5f82b86d-e75d-4dab-8091-036e58e104b6",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0aadda5f-76d7-453e-b52c-adfc69c5fe98"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "a412680c8047933fc8ce5a913f89c3c2",
          "id": "cd08b746-7f45-4db8-9390-4479b839dde5",
          "timestamp": 1629927790741,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
          "name": "/ServiceOrder",
          "request": {
            "description": {
              "content": "This operation search for the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                "type": "text/javascript",
                "exec": [
                  "var Ajv = require('ajv');",
                  "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                  "    ServiceOrder_Schema = {",
                  "    \"$schema\": \"http://json-schema.org/schema#\",",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"serviceOrderItem\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"id\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"action\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"@type\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"service\": {",
                  "                        \"anyOf\": [{",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"serviceSpecification\": {",
                  "                                    \"type\": \"object\",",
                  "                                    \"properties\": {",
                  "                                        \"id\": {",
                  "                                            \"type\": \"string\"",
                  "                                        }",
                  "                                    },",
                  "                                    \"required\": [\"id\"]",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                  "                        }, {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"id\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                  "                        }]",
                  "                    }",
                  "                },",
                  "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"serviceOrderItem\"]",
                  "};",
                  "",
                  "",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "        ",
                  "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                  "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                  "            pm.expect(valid).to.eql(true);",
                  "        });",
                  "        console.log(ajv.errorsText());",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "        }",
                  "",
                  "",
                  "    });",
                  "}",
                  "else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "    pm.test('Body includes value held on href', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['href']);",
                  "    });",
                  "    pm.test('Body includes value held on id', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['id']);",
                  "    });",
                  "    pm.test('Body includes value held on orderDate', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "    });",
                  "    // Individualized tests",
                  "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "    }",
                  "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "    }",
                  "",
                  "}",
                  "",
                  ""
                ],
                "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5f82b86d-e75d-4dab-8091-036e58e104b6",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0aadda5f-76d7-453e-b52c-adfc69c5fe98",
          "scriptId": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
          "execution": "a3fae49c-f52c-416b-b397-973b218fe7fa"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "e7e75c9c-f8c6-4a19-94f5-b7e7e6cf9846",
          "timestamp": 1629927790742,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
          "name": "/ServiceOrder",
          "request": {
            "description": {
              "content": "This operation search for the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                "type": "text/javascript",
                "exec": [
                  "var Ajv = require('ajv');",
                  "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                  "    ServiceOrder_Schema = {",
                  "    \"$schema\": \"http://json-schema.org/schema#\",",
                  "    \"type\": \"object\",",
                  "    \"properties\": {",
                  "        \"serviceOrderItem\": {",
                  "            \"type\": \"array\",",
                  "            \"items\": {",
                  "                \"type\": \"object\",",
                  "                \"properties\": {",
                  "                    \"id\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"action\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"@type\": {",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"service\": {",
                  "                        \"anyOf\": [{",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"serviceSpecification\": {",
                  "                                    \"type\": \"object\",",
                  "                                    \"properties\": {",
                  "                                        \"id\": {",
                  "                                            \"type\": \"string\"",
                  "                                        }",
                  "                                    },",
                  "                                    \"required\": [\"id\"]",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                  "                        }, {",
                  "                            \"type\": \"object\",",
                  "                            \"properties\": {",
                  "                                \"id\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"state\": {",
                  "                                    \"type\": \"string\"",
                  "                                },",
                  "                                \"serviceType\": {",
                  "                                    \"type\": \"string\"",
                  "                                }",
                  "                            },",
                  "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                  "                        }]",
                  "                    }",
                  "                },",
                  "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                  "            }",
                  "        }",
                  "    },",
                  "    \"required\": [\"serviceOrderItem\"]",
                  "};",
                  "",
                  "",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "",
                  "var jsonData = pm.response.json();",
                  "",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "        ",
                  "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                  "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                  "            pm.expect(valid).to.eql(true);",
                  "        });",
                  "        console.log(ajv.errorsText());",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "        }",
                  "",
                  "",
                  "    });",
                  "}",
                  "else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "",
                  "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "",
                  "",
                  "",
                  "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "",
                  "    pm.test('Body includes value held on href', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['href']);",
                  "    });",
                  "    pm.test('Body includes value held on id', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['id']);",
                  "    });",
                  "    pm.test('Body includes value held on orderDate', function () {",
                  "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "    });",
                  "    // Individualized tests",
                  "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                  "    }",
                  "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                  "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                  "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                  "    }",
                  "",
                  "}",
                  "",
                  ""
                ],
                "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5f82b86d-e75d-4dab-8091-036e58e104b6",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0aadda5f-76d7-453e-b52c-adfc69c5fe98",
          "scriptId": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "3bc667be-6a48-4d8f-ac6d-192a9a23be41",
          "timestamp": 1629927790752,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
          "name": "/ServiceOrder/{{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDSO01}}"
              ],
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5353e0ef-bf22-49e3-9b97-44d42a436bcb",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e5bc69a-f1d0-4101-ba10-346e59e2c90c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "bd291fd6636fa58b6be1d6a9c5c383ff",
          "id": "b3811e6b-9177-471c-99e3-3034c1f413eb",
          "timestamp": 1629927790757,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
          "name": "/ServiceOrder/{{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDSO01}}"
              ],
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5353e0ef-bf22-49e3-9b97-44d42a436bcb",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e5bc69a-f1d0-4101-ba10-346e59e2c90c",
          "scriptId": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
          "execution": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "ea4c3fe2-387b-4486-95d2-5ea3d0fbfa71",
          "timestamp": 1629927790758,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
          "name": "/ServiceOrder/{{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation search for one of the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "{{IDSO01}}"
              ],
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
              }
            }
          ]
        },
        "parent": {
          "id": "60e33759-8b3b-4bcf-899c-ac5017a2bfbb",
          "name": "N1",
          "item": [
            {
              "id": "79b65be5-1de5-4381-815d-0732f2cf1425",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation creates a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"requestedCompletionDate\":\"2020-10-01T14:20:54.1Z\",\"externalReference\":[{\"externalReferenceType\":\"SalesOrderId\",\"name\":\"d11e1668-2715-409e-a586-6e0bfa55de9e\"}],\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\",\"@referredType\":\"InstanceConsumerGroup\"}],\"serviceOrderItem\":[{\"id\":\"e26205f4-e144-4ded-9e64-82ede0b26f4\",\"action\":\"add\",\"service\":{\"description\":\"Ethernet Access Service\",\"state\":\"reserved\",\"serviceSpecification\":{\"href\":\"serviceCatalogManagement/v4/serviceSpecification/ethernetAccess/2f8c19f5-9e12-426d-a329-54fe3ddb3245\",\"version\":\"v3.0.0\",\"name\":\"ethernetAccess\"},\"relatedParty\":[{\"id\":\"B2BSmallandMediumBusiness\",\"role\":\"InstanceConsumerGroup\"}],\"serviceCharacteristic\":[{\"name\":\"ethernetServiceType\",\"value\":\"EVPL\"},{\"name\":\"ethernetBundling\",\"value\":\"All-to-One\"},{\"name\":\"ceVlanIdPreservation\",\"value\":\"enabled\"}]}}]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd6173d6-637f-405b-a2ca-5236a6ea1218",
                    "type": "text/javascript",
                    "exec": [
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData)) { ",
                      "  ",
                      "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                      "  ",
                      "",
                      "}",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "  pm.response.to.have.status(201);",
                      "});",
                      "",
                      "var instance = pm.response.json();",
                      "var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "pm.globals.set('HREFSO01', instance['href']);",
                      "pm.globals.set('IDSO01', instance['id']);",
                      "pm.globals.set('ORDERDATESO01', instance['orderDate']);",
                      "",
                      "pm.test('Body includes value held on href', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['href']);",
                      "});",
                      "pm.test('Body includes value held on id', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['id']);",
                      "});",
                      "pm.test('Body includes value held on orderDate', function () {",
                      "  pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "1951f5c7-a962-49f4-a4a3-2c64cc0a9a2b"
                  }
                }
              ]
            },
            {
              "id": "e1a3a999-aeda-4109-86f4-eba559eecaaf",
              "name": "/ServiceOrder",
              "request": {
                "description": {
                  "content": "This operation search for the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3c6521e-dbfe-45b9-9b67-ff3ce1af6f4c",
                    "type": "text/javascript",
                    "exec": [
                      "var Ajv = require('ajv');",
                      "ajv = new Ajv({allErrors: true, jsonPointers: true}),",
                      "    ServiceOrder_Schema = {",
                      "    \"$schema\": \"http://json-schema.org/schema#\",",
                      "    \"type\": \"object\",",
                      "    \"properties\": {",
                      "        \"serviceOrderItem\": {",
                      "            \"type\": \"array\",",
                      "            \"items\": {",
                      "                \"type\": \"object\",",
                      "                \"properties\": {",
                      "                    \"id\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"action\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"@type\": {",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"service\": {",
                      "                        \"anyOf\": [{",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"serviceSpecification\": {",
                      "                                    \"type\": \"object\",",
                      "                                    \"properties\": {",
                      "                                        \"id\": {",
                      "                                            \"type\": \"string\"",
                      "                                        }",
                      "                                    },",
                      "                                    \"required\": [\"id\"]",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"serviceSpecification\", \"serviceType\", \"state\"]",
                      "                        }, {",
                      "                            \"type\": \"object\",",
                      "                            \"properties\": {",
                      "                                \"id\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"state\": {",
                      "                                    \"type\": \"string\"",
                      "                                },",
                      "                                \"serviceType\": {",
                      "                                    \"type\": \"string\"",
                      "                                }",
                      "                            },",
                      "                            \"required\": [\"id\", \"serviceType\", \"state\"]",
                      "                        }]",
                      "                    }",
                      "                },",
                      "                \"required\": [\"@type\", \"action\", \"id\", \"service\"]",
                      "            }",
                      "        }",
                      "    },",
                      "    \"required\": [\"serviceOrderItem\"]",
                      "};",
                      "",
                      "",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "",
                      "",
                      "var jsonData = pm.response.json();",
                      "",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "        ",
                      "        var valid = ajv.validate(ServiceOrder_Schema, instance);",
                      "        pm.test(\"Schema is valid?: \" + ajv.errorsText(), function () {",
                      "            pm.expect(valid).to.eql(true);",
                      "        });",
                      "        console.log(ajv.errorsText());",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "        pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "        }",
                      "",
                      "",
                      "    });",
                      "}",
                      "else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "",
                      "    pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "",
                      "",
                      "",
                      "    pm.test('Response has serviceOrderItem attribute', function () { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "    pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "    pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "    pm.test('Response has orderDate attribute', function () { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "",
                      "    pm.test('Body includes value held on href', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['href']);",
                      "    });",
                      "    pm.test('Body includes value held on id', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['id']);",
                      "    });",
                      "    pm.test('Body includes value held on orderDate', function () {",
                      "        pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "    });",
                      "    // Individualized tests",
                      "    if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO01'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO01\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO01'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01'); });",
                      "    }",
                      "    if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "        pm.test('href is ' + pm.globals.get(\"HREFSO02\"), function () { pm.expect(instance['href']) == pm.globals.get('HREFSO02'); });",
                      "        pm.test('id is ' + pm.globals.get(\"IDSO02\"), function () { pm.expect(instance['id']) == pm.globals.get('IDSO02'); });",
                      "        pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO02\"), function () { pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO02'); });",
                      "    }",
                      "",
                      "}",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "a3fae49c-f52c-416b-b397-973b218fe7fa"
                  }
                }
              ]
            },
            {
              "id": "057a3099-b9ad-4a3a-8966-c8444ec49be4",
              "name": "/ServiceOrder/{{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "{{IDSO01}}"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5ffd354-9668-4ab9-abc6-688bec16cc6a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "64d1550c-d2f3-4847-a781-7ef5a4f94fc6"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5353e0ef-bf22-49e3-9b97-44d42a436bcb",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1e5bc69a-f1d0-4101-ba10-346e59e2c90c",
          "scriptId": "d5ffd354-9668-4ab9-abc6-688bec16cc6a"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "d0306838-2ed0-4627-bb1e-2c073d9aaef1",
          "timestamp": 1629927790768,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
          "name": "/ServiceOrder?fields=href",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "href"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "2cc22254-5bef-47b7-a50c-e566b14f2bcc",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3a5f667-4292-4dd5-83f1-dfccf7ca6bb2"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "5ffb1cd7-52a6-4322-943f-33cdf948ab03",
          "timestamp": 1629927790784,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
          "name": "/ServiceOrder?fields=id",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "id"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "deaf6603-162c-460f-9540-e70aad30969a",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5abd806b-940e-48df-b59e-923e00d3cca1"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "04608691-4e53-4b30-8066-0f7d4c9d5120",
          "timestamp": 1629927790811,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
          "name": "/ServiceOrder?id={{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDSO01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "e2181b97-fe05-4be6-9f2e-c4ba9d15ef6d",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6f8e9321-09f1-426b-9fef-636185d9c08a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "b5594292a1f8eb129eb610eb61759e21",
          "id": "52324583-42eb-43b9-a8ff-4b5cb22536de",
          "timestamp": 1629927790818,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
          "name": "/ServiceOrder?id={{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDSO01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "e2181b97-fe05-4be6-9f2e-c4ba9d15ef6d",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6f8e9321-09f1-426b-9fef-636185d9c08a",
          "scriptId": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
          "execution": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "9d45c977-c922-49af-bc6c-a97620310f30",
          "timestamp": 1629927790819,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
          "name": "/ServiceOrder?id={{IDSO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{IDSO01}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "e2181b97-fe05-4be6-9f2e-c4ba9d15ef6d",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6f8e9321-09f1-426b-9fef-636185d9c08a",
          "scriptId": "def337ac-b19d-4769-9a2d-6a795fed0cdc"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "33acc8b0-7aa8-4320-be14-de2625440918",
          "timestamp": 1629927790830,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
          "name": "/ServiceOrder?fields=orderDate",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "orderDate"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "ff0a3aeb-2699-4e07-8c0b-22282508c6a5",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d6a165f2-6ea7-4acb-8ab0-fbad6a8d4350"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "56b21f59-9584-45d8-b88e-6929e151e6da",
          "timestamp": 1629927790843,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
          "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "orderDate",
                  "value": "\"{{ORDERDATESO01}}\""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "9ddb90bf-77ed-4347-92d2-008d60971bc2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7e6b4ce6-609a-4e4b-adce-abbba18951f4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "3eaa2c70e8edc9263be3e00bf722f3c2",
          "id": "a53d8eaa-23fa-457e-8fd1-23adc85a1079",
          "timestamp": 1629927790848,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
          "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "orderDate",
                  "value": "\"{{ORDERDATESO01}}\""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "9ddb90bf-77ed-4347-92d2-008d60971bc2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7e6b4ce6-609a-4e4b-adce-abbba18951f4",
          "scriptId": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
          "execution": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "f4257c47-503b-4c5d-a2c7-9ec38366776a",
          "timestamp": 1629927790849,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
          "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
          "request": {
            "description": {
              "content": "This operation filter a ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [
                {
                  "key": "orderDate",
                  "value": "\"{{ORDERDATESO01}}\""
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "  ",
                  "  ",
                  "  ",
                  "var jsonData = pm.response.json();",
                  "  ",
                  "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                  "    jsonData.forEach(function (instance, index) {",
                  "      ",
                  "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "          ",
                  "    });",
                  "  }",
                  "  else {",
                  "    var instance = pm.response.json();",
                  "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                  "      ",
                  "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                  "      ",
                  "      ",
                  "      ",
                  "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                  "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                  "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                  "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                  "      ",
                  "        pm.test('Body includes value held on href', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['href']);",
                  "        });",
                  "        pm.test('Body includes value held on id', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['id']);",
                  "        });",
                  "        pm.test('Body includes value held on orderDate', function () {",
                  "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                  "        });",
                  "        // Individualized tests",
                  "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                  "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                  "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                  "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                  "        }",
                  "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                  "            pm.test('IDSO02 not expected on this test', function () {",
                  "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                  "            });",
                  "        }",
                  "",
                  "        ",
                  "   ",
                  "}",
                  "  ",
                  "  "
                ],
                "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
              }
            }
          ]
        },
        "parent": {
          "id": "40e70db6-89c0-4c77-adbb-0027e5ff12cc",
          "name": "N2",
          "item": [
            {
              "id": "89bd6a6e-7351-440a-93e8-553e261ffbdc",
              "name": "/ServiceOrder?fields=href",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "href"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2cf050f-5146-412e-9976-0f2396dd1cdc",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fade4bc2-2279-4ba2-a364-080fe9d2b102"
                  }
                }
              ]
            },
            {
              "id": "5a9b00ef-f20e-4f25-96d6-17ccd76f258c",
              "name": "/ServiceOrder?fields=id",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "id"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd5b710c-30ad-4370-aee2-1605f812de05",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10cac2e7-5caa-4c1f-bcfe-029d5b35a5bd"
                  }
                }
              ]
            },
            {
              "id": "51af2a72-44b6-4a7e-b817-89ba767c496d",
              "name": "/ServiceOrder?id={{IDSO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{IDSO01}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "def337ac-b19d-4769-9a2d-6a795fed0cdc",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "c34829c7-cc59-4f2e-b2cf-992483232c9e"
                  }
                }
              ]
            },
            {
              "id": "203d52b6-942d-4a2a-85c3-e28b7c85df76",
              "name": "/ServiceOrder?fields=orderDate",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "orderDate"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2bde2b8f-badd-45b9-b74c-8b095756451f",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "9137e5d1-d064-44da-8f2d-f52f9ee874b4"
                  }
                }
              ]
            },
            {
              "id": "f4a0de8d-3ea9-46d3-83b3-c9395549cb23",
              "name": "/ServiceOrder?orderDate={{ORDERDATESO01}}",
              "request": {
                "description": {
                  "content": "This operation filter a ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [
                    {
                      "key": "orderDate",
                      "value": "\"{{ORDERDATESO01}}\""
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ac5d43-99bd-480b-84ac-e7361cdb9942",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "  ",
                      "  ",
                      "  ",
                      "var jsonData = pm.response.json();",
                      "  ",
                      "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                      "    jsonData.forEach(function (instance, index) {",
                      "      ",
                      "        var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "          ",
                      "    });",
                      "  }",
                      "  else {",
                      "    var instance = pm.response.json();",
                      "    var requiredAttributes = ['serviceOrderItem', 'href', 'id', 'state', 'orderDate'];",
                      "      ",
                      "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                      "      ",
                      "      ",
                      "      ",
                      "        pm.test('Response has serviceOrderItem attribute', function() { pm.expect(instance[\"serviceOrderItem\"]).to.be.a('array'); });",
                      "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                      "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                      "        pm.test('Response has orderDate attribute', function() { pm.expect(instance[\"orderDate\"]).to.be.a('string'); });",
                      "      ",
                      "        pm.test('Body includes value held on href', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['href']);",
                      "        });",
                      "        pm.test('Body includes value held on id', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['id']);",
                      "        });",
                      "        pm.test('Body includes value held on orderDate', function () {",
                      "            pm.expect(pm.response.text()).to.include(instance['orderDate']);",
                      "        });",
                      "        // Individualized tests",
                      "        if (instance.id == pm.globals.get(\"IDSO01\")) {",
                      "            pm.test('href is ' + pm.globals.get(\"HREFSO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSO01');});",
                      "            pm.test('id is ' + pm.globals.get(\"IDSO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSO01');});",
                      "            pm.test('orderDate is ' + pm.globals.get(\"ORDERDATESO01\"), function() {pm.expect(instance['orderDate']) == pm.globals.get('ORDERDATESO01');});",
                      "        }",
                      "        if (instance.id == pm.globals.get(\"IDSO02\")) {",
                      "            pm.test('IDSO02 not expected on this test', function () {",
                      "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                      "            });",
                      "        }",
                      "",
                      "        ",
                      "   ",
                      "}",
                      "  ",
                      "  "
                    ],
                    "_lastExecutionId": "463ab9fb-e63f-4ef2-8d9d-3f5d7bb02ffe"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "9ddb90bf-77ed-4347-92d2-008d60971bc2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7e6b4ce6-609a-4e4b-adce-abbba18951f4",
          "scriptId": "46ac5d43-99bd-480b-84ac-e7361cdb9942"
        }
      },
      {
        "error": {
          "errno": "ECONNREFUSED",
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 8082,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:8082",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:8082\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1107:14)",
          "checksum": "001c0c5caabfb5fb46de0327f85c07c9",
          "id": "f0e01622-3282-4992-8299-59ded7216498",
          "timestamp": 1629927790858,
          "stacktrace": [
            {
              "fileName": "net.js",
              "lineNumber": 1107,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2beb6f02-ec5a-4786-b399-19d2870e325a",
          "name": "/ServiceOrder/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "8c4cfbc4-2280-4d07-a44f-3a8aaf2849c9"
              ],
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52beba39-fb64-4e9e-8e8f-32ee956ba3ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "b7e2982e-1699-4313-836b-2b251b3a2218"
              }
            }
          ]
        },
        "parent": {
          "id": "5a2cd552-b292-49aa-a44a-9b55d2bb43d7",
          "name": "E1",
          "item": [
            {
              "id": "2beb6f02-ec5a-4786-b399-19d2870e325a",
              "name": "/ServiceOrder/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "8c4cfbc4-2280-4d07-a44f-3a8aaf2849c9"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52beba39-fb64-4e9e-8e8f-32ee956ba3ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "b7e2982e-1699-4313-836b-2b251b3a2218"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "f885a232-70cc-4f95-94be-60807bbdbcd1",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e099d019-395f-41b2-a239-533840954b0a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected { Object (id, _details, ...) } to have property 'code'",
          "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "a8c83ccf5454153ea289489672ade1ce",
          "id": "45087402-274d-4013-be78-3fbb98cd28d4",
          "timestamp": 1629927790862,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2beb6f02-ec5a-4786-b399-19d2870e325a",
          "name": "/ServiceOrder/404ID",
          "request": {
            "description": {
              "content": "This operation search for one of the created ServiceOrder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "8c4cfbc4-2280-4d07-a44f-3a8aaf2849c9"
              ],
              "host": [
                "{{Service_Ordering}}serviceOrder"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
              },
              {
                "key": "X-Group-ID",
                "value": "test"
              },
              {
                "key": "X-Correlation-ID",
                "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52beba39-fb64-4e9e-8e8f-32ee956ba3ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  ""
                ],
                "_lastExecutionId": "b7e2982e-1699-4313-836b-2b251b3a2218"
              }
            }
          ]
        },
        "parent": {
          "id": "5a2cd552-b292-49aa-a44a-9b55d2bb43d7",
          "name": "E1",
          "item": [
            {
              "id": "2beb6f02-ec5a-4786-b399-19d2870e325a",
              "name": "/ServiceOrder/404ID",
              "request": {
                "description": {
                  "content": "This operation search for one of the created ServiceOrder",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "8c4cfbc4-2280-4d07-a44f-3a8aaf2849c9"
                  ],
                  "host": [
                    "{{Service_Ordering}}serviceOrder"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eb898d52-c336-4108-992c-b43cbb688f53"
                  },
                  {
                    "key": "X-Group-ID",
                    "value": "test"
                  },
                  {
                    "key": "X-Correlation-ID",
                    "value": "a8c6acce-ba4a-4ea5-8092-230f653e05dd"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52beba39-fb64-4e9e-8e8f-32ee956ba3ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      ""
                    ],
                    "_lastExecutionId": "b7e2982e-1699-4313-836b-2b251b3a2218"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "f885a232-70cc-4f95-94be-60807bbdbcd1",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e099d019-395f-41b2-a239-533840954b0a",
          "scriptId": "52beba39-fb64-4e9e-8e8f-32ee956ba3ec",
          "execution": "b7e2982e-1699-4313-836b-2b251b3a2218"
        }
      }
    ],
    "error": null
  }
}