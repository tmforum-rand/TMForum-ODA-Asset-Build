{
	"info": {
		"_postman_id": "3d6f8f32-d097-4ec7-bb40-d80037034091",
		"name": "CTK-Party-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/Individual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('FAMILYNAMEIN01', instance['familyName']);",
									"pm.globals.set('GIVENNAMEIN01', instance['givenName']);",
									"pm.globals.set('HREFIN01', instance['href']);",
									"pm.globals.set('IDIN01', instance['id']);",
									"",
									"pm.test('Body includes value held on familyName', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"});",
									"pm.test('Body includes value held on givenName', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"familyName\": \"Lamborgizzia\",\n  \"givenName\": \"Jane\"\n}"
						},
						"url": {
							"raw": "{{Party}}individual",
							"host": [
								"{{Party}}individual"
							]
						},
						"description": "This operation creates a Individual"
					},
					"response": []
				},
				{
					"name": "/Individual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN02\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN02');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN02\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN02\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN02');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN02\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual",
							"host": [
								"{{Party}}individual"
							]
						},
						"description": "This operation search for the created Individual"
					},
					"response": []
				},
				{
					"name": "/Individual/{{IDIN01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('IDIN02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('IDIN02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual/{{IDIN01}}",
							"host": [
								"{{Party}}individual"
							],
							"path": [
								"{{IDIN01}}"
							]
						},
						"description": "This operation search for one of the created Individual"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/Individual?fields=familyName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual?fields=familyName",
							"host": [
								"{{Party}}individual"
							],
							"query": [
								{
									"key": "fields",
									"value": "familyName"
								}
							]
						},
						"description": "This operation filter a Individual"
					},
					"response": []
				},
				{
					"name": "/Individual?familyName={{FAMILYNAMEIN01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('IDIN02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('IDIN02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual?familyName={{FAMILYNAMEIN01}}",
							"host": [
								"{{Party}}individual"
							],
							"query": [
								{
									"key": "familyName",
									"value": "{{FAMILYNAMEIN01}}"
								}
							]
						},
						"description": "This operation filter a Individual"
					},
					"response": []
				},
				{
					"name": "/Individual?fields=givenName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual?fields=givenName",
							"host": [
								"{{Party}}individual"
							],
							"query": [
								{
									"key": "fields",
									"value": "givenName"
								}
							]
						},
						"description": "This operation filter a Individual"
					},
					"response": []
				},
				{
					"name": "/Individual?givenName={{GIVENNAMEIN01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('IDIN02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['familyName', 'givenName', 'href', 'id'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has familyName attribute', function() { pm.expect(instance[\"familyName\"]).to.be.a('string'); });",
									"        pm.test('Response has givenName attribute', function() { pm.expect(instance[\"givenName\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on familyName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['familyName']);",
									"        });",
									"        pm.test('Body includes value held on givenName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['givenName']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDIN01\")) {",
									"            pm.test('familyName is ' + pm.globals.get(\"FAMILYNAMEIN01\"), function() {pm.expect(instance['familyName']) == pm.globals.get('FAMILYNAMEIN01');});",
									"            pm.test('givenName is ' + pm.globals.get(\"GIVENNAMEIN01\"), function() {pm.expect(instance['givenName']) == pm.globals.get('GIVENNAMEIN01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFIN01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFIN01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDIN01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDIN01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDIN02\")) {",
									"            pm.test('IDIN02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual?givenName={{GIVENNAMEIN01}}",
							"host": [
								"{{Party}}individual"
							],
							"query": [
								{
									"key": "givenName",
									"value": "{{GIVENNAMEIN01}}"
								}
							]
						},
						"description": "This operation filter a Individual"
					},
					"response": []
				},
				{
					"name": "/Individual?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual?fields=id",
							"host": [
								"{{Party}}individual"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a Individual"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/Individual/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}individual/5ffaf1d2-ea2a-49fc-a47b-e93a95182a97",
							"host": [
								"{{Party}}individual"
							],
							"path": [
								"5ffaf1d2-ea2a-49fc-a47b-e93a95182a97"
							]
						},
						"description": "This operation search for one of the created Individual"
					},
					"response": []
				}
			]
		},
		{
			"name": "N1",
			"item": [
				{
					"name": "/Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['href', 'id', 'tradingName'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has tradingName attribute', function() { pm.expect(instance[\"tradingName\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('HREFOR01', instance['href']);",
									"pm.globals.set('IDOR01', instance['id']);",
									"pm.globals.set('TRADINGNAMEOR01', instance['tradingName']);",
									"",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on tradingName', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['tradingName']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tradingName\": \"Coffee Do Brazil Fair Trade\"\n}"
						},
						"url": {
							"raw": "{{Party}}organization",
							"host": [
								"{{Party}}organization"
							]
						},
						"description": "This operation creates a Organization"
					},
					"response": []
				},
				{
					"name": "/Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'tradingName'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has tradingName attribute', function() { pm.expect(instance[\"tradingName\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on tradingName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['tradingName']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDOR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR01');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR01\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDOR02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR02');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR02\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'tradingName'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has tradingName attribute', function() { pm.expect(instance[\"tradingName\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on tradingName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['tradingName']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDOR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR01');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR01\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDOR02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR02');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR02\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}organization",
							"host": [
								"{{Party}}organization"
							]
						},
						"description": "This operation search for the created Organization"
					},
					"response": []
				},
				{
					"name": "/Organization/{{IDOR01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'tradingName'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has tradingName attribute', function() { pm.expect(instance[\"tradingName\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on tradingName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['tradingName']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDOR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR01');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR01\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDOR02\")) {",
									"            pm.test('IDOR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'tradingName'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has tradingName attribute', function() { pm.expect(instance[\"tradingName\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on tradingName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['tradingName']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDOR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR01');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR01\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDOR02\")) {",
									"            pm.test('IDOR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}organization/{{IDOR01}}",
							"host": [
								"{{Party}}organization"
							],
							"path": [
								"{{IDOR01}}"
							]
						},
						"description": "This operation search for one of the created Organization"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/Organization?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}organization?fields=id",
							"host": [
								"{{Party}}organization"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a Organization"
					},
					"response": []
				},
				{
					"name": "/Organization?fields=tradingName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}organization?fields=tradingName",
							"host": [
								"{{Party}}organization"
							],
							"query": [
								{
									"key": "fields",
									"value": "tradingName"
								}
							]
						},
						"description": "This operation filter a Organization"
					},
					"response": []
				},
				{
					"name": "/Organization?tradingName={{TRADINGNAMEOR01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'tradingName'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has tradingName attribute', function() { pm.expect(instance[\"tradingName\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on tradingName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['tradingName']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDOR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR01');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR01\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDOR02\")) {",
									"            pm.test('IDOR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'tradingName'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has tradingName attribute', function() { pm.expect(instance[\"tradingName\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on tradingName', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['tradingName']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDOR01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFOR01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFOR01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDOR01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDOR01');});",
									"            pm.test('tradingName is ' + pm.globals.get(\"TRADINGNAMEOR01\"), function() {pm.expect(instance['tradingName']) == pm.globals.get('TRADINGNAMEOR01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDOR02\")) {",
									"            pm.test('IDOR02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}organization?tradingName={{TRADINGNAMEOR01}}",
							"host": [
								"{{Party}}organization"
							],
							"query": [
								{
									"key": "tradingName",
									"value": "{{TRADINGNAMEOR01}}"
								}
							]
						},
						"description": "This operation filter a Organization"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/Organization/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Party}}organization/933929cd-1761-44f5-96e7-e6e138d17b94",
							"host": [
								"{{Party}}organization"
							],
							"path": [
								"933929cd-1761-44f5-96e7-e6e138d17b94"
							]
						},
						"description": "This operation search for one of the created Organization"
					},
					"response": []
				}
			]
		}
	]
}