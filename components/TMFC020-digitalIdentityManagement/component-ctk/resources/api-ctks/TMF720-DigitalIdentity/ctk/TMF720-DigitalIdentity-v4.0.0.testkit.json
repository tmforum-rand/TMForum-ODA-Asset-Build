{
	"info": {
		"_postman_id": "582d9bad-af75-4d7b-96cf-cf355a4cb890",
		"name": "CTK-DigitalIdentity-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/DigitalIdentity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('CREATIONDATEDI01', instance['creationDate']);",
									"pm.globals.set('HREFDI01', instance['href']);",
									"pm.globals.set('IDDI01', instance['id']);",
									"pm.globals.set('STATUSDI01', instance['status']);",
									"",
									"pm.test('Body includes value held on creationDate', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on status', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['status']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n                    \"credential\": [{\n                        \"id\": \"\",\n                        \"@type\": \"\"\n                    }],\n                    \"partyRoleIdentified\": [{\n                        \"@referredType\": \"Party\",\n                        \"id\": \"\",\n                        \"role\": \"\"\n                    }]\n                }"
						},
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							]
						},
						"description": "This operation creates a DigitalIdentity"
					},
					"response": []
				},
				{
					"name": "/DigitalIdentity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI02\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI02\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI02');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							]
						},
						"description": "This operation search for the created DigitalIdentity"
					},
					"response": []
				},
				{
					"name": "/DigitalIdentity/{{IDDI01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity/{{IDDI01}}",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							],
							"path": [
								"{{IDDI01}}"
							]
						},
						"description": "This operation search for one of the created DigitalIdentity"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/DigitalIdentity?fields=creationDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity?fields=creationDate",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							],
							"query": [
								{
									"key": "fields",
									"value": "creationDate"
								}
							]
						},
						"description": "This operation filter a DigitalIdentity"
					},
					"response": []
				},
				{
					"name": "/DigitalIdentity?creationDate={{CREATIONDATEDI01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity?creationDate={{CREATIONDATEDI01}}",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							],
							"query": [
								{
									"key": "creationDate",
									"value": "{{CREATIONDATEDI01}}"
								}
							]
						},
						"description": "This operation filter a DigitalIdentity"
					},
					"response": []
				},
				{
					"name": "/DigitalIdentity?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity?fields=id",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a DigitalIdentity"
					},
					"response": []
				},
				{
					"name": "/DigitalIdentity?id={{IDDI01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity?id={{IDDI01}}",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDDI01}}"
								}
							]
						},
						"description": "This operation filter a DigitalIdentity"
					},
					"response": []
				},
				{
					"name": "/DigitalIdentity?fields=status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity?fields=status",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							],
							"query": [
								{
									"key": "fields",
									"value": "status"
								}
							]
						},
						"description": "This operation filter a DigitalIdentity"
					},
					"response": []
				},
				{
					"name": "/DigitalIdentity?status={{STATUSDI01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['creationDate', 'credential', 'href', 'id', 'status'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has creationDate attribute', function() { pm.expect(instance[\"creationDate\"]).to.be.a('string'); });",
									"        pm.test('Response has credential attribute', function() { pm.expect(instance[\"credential\"]).to.be.a('array'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on creationDate', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['creationDate']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on status', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['status']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDDI01\")) {",
									"            pm.test('creationDate is ' + pm.globals.get(\"CREATIONDATEDI01\"), function() {pm.expect(instance['creationDate']) == pm.globals.get('CREATIONDATEDI01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFDI01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFDI01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDDI01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDDI01');});",
									"            pm.test('status is ' + pm.globals.get(\"STATUSDI01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSDI01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDDI02\")) {",
									"            pm.test('IDDI02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}digitalIdentity?status={{STATUSDI01}}",
							"host": [
								"{{DigitalIdentity}}digitalIdentity"
							],
							"query": [
								{
									"key": "status",
									"value": "{{STATUSDI01}}"
								}
							]
						},
						"description": "This operation filter a DigitalIdentity"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/DigitalIdentity/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{DigitalIdentity}}DigitalIdentity/9ed1c5f2-8bc8-4fb6-a054-609b46bbaee4",
							"host": [
								"{{DigitalIdentity}}DigitalIdentity"
							],
							"path": [
								"9ed1c5f2-8bc8-4fb6-a054-609b46bbaee4"
							]
						},
						"description": "This operation search for one of the created DigitalIdentity"
					},
					"response": []
				}
			]
		}
	]
}